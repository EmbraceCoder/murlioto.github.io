<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Js基础笔记</title>
    <url>/2019/11/12/Js%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="第一个-js-程序"><a href="#第一个-js-程序" class="headerlink" title="第一个 js 程序"></a><strong>第一个 js 程序</strong></h1><h2 id="浏览器环境中，代码书写位置"><a href="#浏览器环境中，代码书写位置" class="headerlink" title="浏览器环境中，代码书写位置"></a><strong>浏览器环境中，代码书写位置</strong></h2><ol>
<li>直接书写到页面中的 script 元素的内部.</li>
<li>书写到外部的 js 文件,在页面中引入[推荐].</li>
</ol>
<p><strong>代码分离:内容、样式、三者分离更加容易维护和阅读.</strong></p>
<ul>
<li>页面中，可以存在多个 script 标签，执行顺序从上到下.</li>
<li>如果一个 script 元素引用了外部文件，内部不能书写任何代码.</li>
<li>script 元素有一个可选属性，type，该属性用于指定代码类型，该属性值是 MIME 格式.</li>
</ul>
<h2 id="认识基本语法"><a href="#认识基本语法" class="headerlink" title="认识基本语法"></a><strong>认识基本语法</strong></h2><ul>
<li>语法部分必须是英文符号.</li>
<li>js 代码由多条语句构成,每个语句用英文的分号结束（并非强制要求）.</li>
<li>js 代码从上到下同步执行.</li>
<li>js 语言大小写敏感.</li>
</ul>
<h2 id="认识输出语句"><a href="#认识输出语句" class="headerlink" title="认识输出语句"></a><strong>认识输出语句</strong></h2><p>所有的输出语句都不是 ES 标准.</p>
<ul>
<li>doucumet.write(),该语句用于将数据输出到页面.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>alert(),该语句用于将数据用弹窗的形式显示到页面.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>console.log(),该语句用于将数据显示到控制台(在浏览器中按 F12 显示控制台).</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="认识输入语句"><a href="#认识输入语句" class="headerlink" title="认识输入语句"></a><strong>认识输入语句</strong></h2><p>所有的输入语句都不是 ES 标准.</p>
<ul>
<li>prompt(),弹出一个带有输入框的弹窗.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">prompt(<span class="string">"标题"</span>);</span><br></pre></td></tr></table></figure>

<h2 id="认识注释"><a href="#认识注释" class="headerlink" title="认识注释"></a><strong>认识注释</strong></h2><p>注释:提供给代码阅读者使用，不会参与执行.</p>
<ol>
<li>单行注释： //</li>
<li>多行注释： /**/</li>
</ol>
<ul>
<li>在 vscode 中: <br>快捷键:ctrl+/ 可以快速添加或清除单行注释. <br>快捷键:Alt+shift+a 可以快速添加或清除多行行注释.</li>
</ul>
<h1 id="数据和数据类型"><a href="#数据和数据类型" class="headerlink" title="数据和数据类型"></a><strong>数据和数据类型</strong></h1><p>数据:有用的信息</p>
<p>数据类型:数据分类</p>
<h2 id="Js-中的数据类型"><a href="#Js-中的数据类型" class="headerlink" title="Js 中的数据类型"></a><strong>Js 中的数据类型</strong></h2><h3 id="原始类型-基本类型"><a href="#原始类型-基本类型" class="headerlink" title="原始类型(基本类型)"></a><strong>原始类型(基本类型)</strong></h3><p>原始类型指不可在细分的类型</p>
<ol>
<li><strong>数字类型 number</strong></li>
</ol>
<ul>
<li>直接书写即可.</li>
</ul>
<blockquote>
<p>了解:<br>数字类型可以加上前缀，来表示不同的进制.<br>0:表示 8 进制.<br>0x:表示 16 进制.<br>0b:表示 2 进制.</p>
</blockquote>
<ol start="2">
<li><strong>字符串类型 string</strong></li>
</ol>
<ul>
<li><p>字符串:0 个或多个文本.</p>
</li>
<li><p>单引号 ‘’</p>
</li>
<li><p>双引号 “”</p>
</li>
<li><p>反单引号 `` (模板字符串)</p>
</li>
<li><p>在字符串中,如何表示一个特殊字符,可以使用转义符 ( \ ),即反斜杠.</p>
</li>
</ul>
<ol start="3">
<li><strong>布尔类型 boolean</strong></li>
</ol>
<ul>
<li>布尔类型用于表达真或假两种状态</li>
<li>true,表示真</li>
<li>flase,表示假</li>
</ul>
<ol start="4">
<li><strong>undefined 类型</strong></li>
</ol>
<ul>
<li>表示未定义,不存在</li>
<li>只有一种书写方式:undefined</li>
</ul>
<ol start="5">
<li><strong>null 类型</strong></li>
</ol>
<ul>
<li>表示空,不存在</li>
<li>只有一种书写方式:null</li>
</ul>
<blockquote>
<p>区分某些长数字或者字符串,如果按照数字的方式阅读则使用数字类型,否则使用字符串类型</p>
</blockquote>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><ul>
<li><strong>对象 Object (事物,东西)</strong></li>
</ul>
<ol>
<li>书写方式:{属性:属性值}</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(&#123;</span><br><span class="line">  name: <span class="string">"kiki"</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  addr: &#123;</span><br><span class="line">    state: <span class="string">"china"</span>,</span><br><span class="line">    city: <span class="string">"北京"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  sex: <span class="literal">null</span>,</span><br><span class="line">  love: <span class="literal">undefined</span>,</span><br><span class="line">  girlfriend: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>可以认为,对象,是由多个基本类型组合而成.</li>
</ol>
<ul>
<li><strong>函数</strong></li>
</ul>
<h2 id="得到数据的类型"><a href="#得到数据的类型" class="headerlink" title="得到数据的类型"></a><strong>得到数据的类型</strong></h2><p>在数据前加上 typeof</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> 数据);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>js 的 bug(特征) : typeof null,得到的是 object</p>
</blockquote>
<h2 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a><strong>字面量</strong></h2><p>直接书写的具体数据,叫做<strong>字面量</strong></p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h1><h2 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a><strong>什么是变量</strong></h2><ul>
<li>变量是一块内存空间,用于保存数据</li>
</ul>
<blockquote>
<p>计算机:CPU,内存,硬盘,输入输出设备等<br>内存:存取速度块,数据易丢失<br>硬盘:存取速度慢,数据永久保存<br>计算机程序运行时,仅与内存打交道</p>
</blockquote>
<h2 id="如何使用变量"><a href="#如何使用变量" class="headerlink" title="如何使用变量"></a>如何使用变量</h2><ol>
<li>声明(定义)变量</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输出变量时不可在变量名前加(双/单)引号,否则则输出字符串字面量</span></span><br><span class="line"><span class="keyword">var</span> a; <span class="comment">//声明了一个变量,名为a,目前,变量为undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//打印a的值为undefined</span></span><br></pre></td></tr></table></figure>

<p><strong>变量名声明后,它的值为 undefined</strong></p>
<ol start="2">
<li>给变量赋值</li>
</ol>
<ul>
<li>向变量的内存空间中存放数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// = 赋值符号</span></span><br></pre></td></tr></table></figure>

<ul>
<li>变量可以被从新赋值</li>
</ul>
<blockquote>
<p>变量可以被重新赋值,新的值会覆盖原来的值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a, <span class="keyword">typeof</span> a); <span class="comment">//值为1,类型为number</span></span><br><span class="line">a = <span class="string">"abc"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a, <span class="keyword">typeof</span> a); <span class="comment">//值为abc,类型为string</span></span><br></pre></td></tr></table></figure>

<ul>
<li>变量的名称</li>
</ul>
<blockquote>
<p>在开发中,凡是需要自行命名的位置,叫做标识符</p>
</blockquote>
<ol>
<li><p>[必须]只能以英文字母,下滑线,$开头</p>
</li>
<li><p>其他位置可以出现数字,字母,下滑线,$</p>
</li>
<li><p>标识符应做到望文知意</p>
</li>
<li><p>如有多个单词,使用驼峰命名法,单词首字母大写</p>
</li>
<li><p>不可以与关键字,保留词重复</p>
</li>
</ol>
<blockquote>
<p>大驼峰:每个单词首字母大写 <br>小驼峰:除第一个单词外,首字母大写</p>
</blockquote>
<blockquote>
<p>宽度:width,高度:height,图片:imags 等</p>
</blockquote>
<ul>
<li>声明和赋值合并</li>
</ul>
<blockquote>
<p>变量声明和和赋值可以一条语句书写,多个变量可以合并声明并赋值</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, c;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line">c = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//等同于上面</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>,</span><br><span class="line">  b = <span class="number">2</span>,</span><br><span class="line">  c = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>任何可以书写数据的地方,都可以书写变量</strong></p>
</li>
<li><p>若使用一个未声明的变量,会导致错误</p>
</li>
</ul>
<blockquote>
<p>例外:使用 typeof 得到类型时,可以是未声明的变量,得到的结果是 undefined</p>
</blockquote>
<ul>
<li><strong>Js 中存在变量提升(预编译)</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">预编译:发生在程序执行的前一刻，又称为预处理，是做代码文本的替换工作</span><br><span class="line"><span class="comment">// eg:等于</span></span><br><span class="line">    <span class="number">1.</span>创建AO对象；</span><br><span class="line">    <span class="number">2.</span>找形参和变量声明，将变量和形参作为AO属性名，值为<span class="literal">undefined</span>；</span><br><span class="line">    <span class="number">3.</span>将实参值和形参相统一；</span><br><span class="line">    <span class="number">4.</span>在函数体里面找函数声明，值赋予函数体；</span><br><span class="line">    预编译前奏:</span><br><span class="line">        <span class="number">1.</span>imply global 暗示全局变量:即任何变量，如果变量未经声明就赋值，此变量就为全局对象（<span class="built_in">window</span>）所有。</span><br><span class="line">            例子：</span><br><span class="line">                eg: a = <span class="number">123</span>;</span><br><span class="line">                eg: <span class="keyword">var</span> a = b = <span class="number">123</span>;</span><br><span class="line">        <span class="number">2.</span>一切声明的全局变量，全是<span class="built_in">window</span>的属性。</span><br><span class="line">            eg: <span class="keyword">var</span> a = <span class="number">123</span> ==&gt; <span class="built_in">window</span>.a = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>所有的变量声明,会自动提到代码的最顶部,但是,这种提升,不会超越脚本块.</p>
</blockquote>
<ul>
<li>Js 中允许定义多个同名变量,同名变量,提升后会变成一个.</li>
</ul>
<h1 id="变量和对象"><a href="#变量和对象" class="headerlink" title="变量和对象"></a>变量和对象</h1><p>原始类型:number,string,boolean,null,undefined</p>
<p>引用类型:object,function(函数)</p>
<h2 id="在变量中存放对象"><a href="#在变量中存放对象" class="headerlink" title="在变量中存放对象"></a>在变量中存放对象</h2><ol>
<li>通过变量,读取对象中的某个属性</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量名.属性名</span></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">  account: <span class="string">"abc"</span>,</span><br><span class="line">  pwd: <span class="string">"123456"</span>,</span><br><span class="line">  gender: <span class="string">"男"</span>,</span><br><span class="line">  isVip: <span class="literal">false</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//输出对象的账号</span></span><br><span class="line"><span class="built_in">console</span>.log(user.account);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>当读取地属性不存在时,会得到 undefined</strong> <br><strong>当读取地属性的对象不存在(undefined 或 null)时,程序报错</strong></p>
</blockquote>
<p>2.通过变量,更改对象中的某个属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//变量名.属性名</span></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">  account: <span class="string">"abc"</span>,</span><br><span class="line">  pwd: <span class="string">"123456"</span>,</span><br><span class="line">  gender: <span class="string">"男"</span>,</span><br><span class="line">  isVip: <span class="literal">false</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//更改user的密码</span></span><br><span class="line">user.pwd = <span class="string">"654321"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(user); <span class="comment">//user.pwd的值更改为654321</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>当赋值的属性不存在时,会添加属性</strong> <br>原始类型 undefined 中不可以有属性</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">  account: <span class="string">"abc"</span>,</span><br><span class="line">  pwd: <span class="string">"123456"</span>,</span><br><span class="line">  gender: <span class="string">"男"</span>,</span><br><span class="line">  isVip: <span class="literal">false</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line">user.tradePwd = <span class="string">"abcdefg"</span>; <span class="comment">//相当于添加了属性tradePwd</span></span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user2;</span><br><span class="line">user2.account = <span class="string">"abcde"</span>; <span class="comment">//报错,原始类型undefined中不可以有属性</span></span><br><span class="line"><span class="built_in">console</span>.log(user2);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>删除属性</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> 变量名.属性名;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">  account: <span class="string">"abc"</span>,</span><br><span class="line">  pwd: <span class="string">"123456"</span>,</span><br><span class="line">  gender: <span class="string">"男"</span>,</span><br><span class="line">  isVip: <span class="literal">false</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">delete</span> user.isVip;</span><br><span class="line"><span class="built_in">console</span>.log(user); <span class="comment">//打印时isVip的属性将消失(删除)</span></span><br><span class="line"><span class="comment">//也可以将属性的属性值设置为undefined(但其两者打印的值不同)</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>属性表达式</li>
</ol>
<blockquote>
<p>给属性赋值,或读取属性时,可以使用下面的格式操作</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    对象变量['属性名']</span></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">  account: <span class="string">"abc"</span>,</span><br><span class="line">  pwd: <span class="string">"123456"</span>,</span><br><span class="line">  gender: <span class="string">"男"</span>,</span><br><span class="line">  isVip: <span class="literal">false</span>,</span><br><span class="line">  age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(user[<span class="string">"account"</span>]); <span class="comment">//打印的值为abc</span></span><br></pre></td></tr></table></figure>

<ul>
<li>某些属性名中包含特殊字符</li>
<li>实际上,Js 对属性的命名要求并不严格,属性可以是任何形式的名字</li>
<li><strong>属性的名字只能是字符串,如果你书写的是数字,会自动转换为字符串</strong></li>
</ul>
<h2 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h2><blockquote>
<p>Js 大部分的宿主环境,都会提供一个特殊的对象,该对象可以直接在 Js 代码中访问,该对象叫做全局对象,在浏览器环境中,全局对象为 window,表示整个窗口.</p>
</blockquote>
<ul>
<li><p>全局对象中的所有的属性,可以直接使用,而不需要写上全局对象名.</p>
</li>
<li><p>开发者,定义的所有变量,实际上会成为 window 对象上的属性.</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"123"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">//输出的值为123</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果变量没有被赋值,则该变量不会覆盖 window 对象上的同名属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>);</span><br><span class="line"><span class="comment">//  a成为window对象上的属性,因为,window之前没有属性a</span></span><br></pre></td></tr></table></figure>

<h1 id="引用类型-1"><a href="#引用类型-1" class="headerlink" title="引用类型"></a>引用类型</h1><ul>
<li><strong>原始类型的变量,存放具体的值</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原始类型</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"123"</span>,</span><br><span class="line">  b = a,</span><br><span class="line">  b = <span class="string">"456"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a, b); <span class="comment">//值分别为123和456</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>引用类型的变量,存放的是内存地址</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用类型</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  name: <span class="string">"123"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// obj1 持有 XX 对象的引用</span></span><br><span class="line"><span class="comment">// obj1 指向 XX 对象(同上)</span></span><br><span class="line"><span class="comment">//出现对象字面量的位置,会开辟一块内存空间,用于存放对象的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj1 和 obj2 指向同一个对象</span></span><br><span class="line"><span class="comment">// obj1 和 obj2 持有相同的(引用/地址)</span></span><br><span class="line"><span class="comment">// 所以,当obj2改变name值时obj1的name值也跟着改变</span></span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj2.name = <span class="string">"456"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.name, obj2.name); <span class="comment">//其值都为456</span></span><br></pre></td></tr></table></figure>

<ul>
<li>凡是出现对象字面量的位置,都一定在内存出现一个新的对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  name: <span class="string">"123"</span>,</span><br><span class="line">  age: <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj2 = &#123;</span><br><span class="line">  name: <span class="string">"456"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj1.name, obj2.name); <span class="comment">//值分别为123和456</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>扩展知识:Js 中的垃圾回收 <br>Js 引擎,会定期的发现内存中无法访问到的对象,该对象称之为垃圾,Js 引擎会在合适的时间将其占用的内存释放.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="string">"123"</span>,</span><br><span class="line">  b: <span class="string">"456"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="string">"abc"</span>,</span><br><span class="line">  b: <span class="string">"def"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.a, obj.b); <span class="comment">//值分别为abc和def</span></span><br><span class="line"><span class="comment">// 第一的obj将会被Js引擎释放[从上往下数]</span></span><br></pre></td></tr></table></figure>

<h1 id="运算符概述"><a href="#运算符概述" class="headerlink" title="运算符概述"></a>运算符概述</h1><ul>
<li>运算符,解决数据运算的问题</li>
</ul>
<h2 id="操作符和操作数"><a href="#操作符和操作数" class="headerlink" title="操作符和操作数"></a>操作符和操作数</h2><ul>
<li><p>操作符:运算符,参与运算的符号</p>
</li>
<li><p>操作数:参与运算的数据,也称之为”元”</p>
</li>
<li><p>操作符不一定只有一个符号</p>
</li>
<li><p>操作符出现在不同的位置,可能具有不同的含义</p>
</li>
</ul>
<blockquote>
<p>目前接触的操作符:</p>
</blockquote>
<ol>
<li><code>=</code>:赋值符号,将右边的数据赋值给左边</li>
<li><code>.</code>:访问符号,用于访问对象的属性</li>
<li><code>[]</code>:访问符号,用于访问对象的属性</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// []访问符号</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="string">"123"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj[a]);</span><br></pre></td></tr></table></figure>

<p>4.<code>()</code>:函数调用</p>
<h2 id="运算符的分类"><a href="#运算符的分类" class="headerlink" title="运算符的分类"></a>运算符的分类</h2><p>按操作数数量区分:</p>
<ol>
<li>一元(目)运算符: () .</li>
<li>二元(目)运算符: + - / * % =</li>
<li>三元(目)运算符: ?:</li>
</ol>
<p>功能区分:</p>
<ol>
<li>算数运算符</li>
<li>逻辑运算符</li>
<li>比价运算符</li>
<li>位运算符</li>
<li>其他</li>
</ol>
<h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><blockquote>
<p>操作符 + 操作数 = 表达式</p>
</blockquote>
<p>每个表达式都有一个运算结果,该结果叫做<strong>返回值</strong>,即运算结果,返回值的类型叫做<strong>返回类型</strong></p>
<ul>
<li>所有的表达式都可以当作数据使用,如下</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj[a] + <span class="number">1</span>); <span class="comment">//值为2</span></span><br></pre></td></tr></table></figure>

<p>运算符的返回值和类型:</p>
<ol>
<li><code>=</code>:该表达式,返回赋值结果</li>
<li><code>.</code>:属性访问表达式,返回的是属性的值</li>
<li><code>[]</code>:属性访问表达式,返回的是属性的值</li>
<li><code>()</code>:函数调用表达式,返回的结果取决于函数的运行</li>
<li>如果是一个声明+赋值的表达式,返回结果为 undefined.</li>
</ol>
<blockquote>
<p>console.log()函数调用结果为 undefined</p>
</blockquote>
<blockquote>
<p>chrome 浏览器控制台的环境是 REPL 环境 <br>REPL:Read Eval Print Loop,读-执行-打印-循坏 <br>当直接在控制台书写代码时,除运行代码之外,还会输出该表达式的返回值</p>
</blockquote>
<h1 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h1><p>数学运算符</p>
<ol>
<li><code>+ - * /</code>(加,减,乘,除)</li>
<li><code>+ -</code>(正负)</li>
<li><code>%</code>(取余数)</li>
<li><code>++ --</code>(加加,减减)</li>
<li><code>**</code>(幂运算)</li>
</ol>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><ol>
<li><p>小数运算是不精确的</p>
</li>
<li><p>除数为 0</p>
</li>
</ol>
<p>如果被除数是正数,得到结果 Infinity(正无穷) <br>如果被除数是负数,得到结果-Infinity(负无穷) <br>如果被除数是 0,得到结果是 NaN (Not a Number,非数字)</p>
<blockquote>
<p>typeof 函数返回类型 string <br>isNaN 函数,该函数用于判断一个数据是否是 NaN,返回 Boolean <br>isFinite 函数,该函数用于判断一个函数是否是有限的,返回 Boolean \</p>
</blockquote>
<ol start="3">
<li>取余</li>
</ol>
<p>余数的符号,与被除数相同</p>
<ol start="4">
<li>幂运算</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>,</span><br><span class="line">  b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a ** b); <span class="comment">//值为4</span></span><br></pre></td></tr></table></figure>

<h2 id="其他类型使用算术运算"><a href="#其他类型使用算术运算" class="headerlink" title="其他类型使用算术运算"></a>其他类型使用算术运算</h2><ol>
<li>除加号的算数运算符</li>
</ol>
<p>将原始类型转换为数字类型(自动完成转换),然后进行运算.</p>
<blockquote>
<p>boolean:true -&gt; 1,false -&gt; 0</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="literal">true</span>); <span class="comment">//值为2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="literal">false</span>); <span class="comment">//值为1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> * <span class="literal">true</span>); <span class="comment">//值为0</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>string:如果字符串内部是一个正确的数字,直接变为数字,如果是一个非数字则得到 NaN(能识别 Infinity,不能把字符串内部的东西当作表达式),如果字符串是一个空字符串(没有任何内容),转换为 0,字符串转换时,会忽略前后空格</p>
</blockquote>
<blockquote>
<p>NaN 虽然是一个数字,但它和任何数字作任何运算,得到的结果都是 NaN</p>
</blockquote>
<ul>
<li><p>null -&gt; 0 and -0</p>
</li>
<li><p>undefined: undefined -&gt; NaN</p>
</li>
</ul>
<p>将对象类型先转化为字符串类型,然后再将该字符串转化为数字类型 \</p>
<p>对象类型 -&gt; “[object object]” -&gt; NaN</p>
<ol start="2">
<li>加号运算符</li>
</ol>
<ul>
<li>加号一边有字符串,含义变为字符串拼接</li>
</ul>
<p>将另一边的其他类型,转化为字符串</p>
<p>数字 -&gt; 数字字符串 <br>Boolean -&gt; Boolean 字符串 <br>null -&gt; “null” <br>undefined -&gt; “undefined” <br>对象 -&gt; [object object]</p>
<ul>
<li>加号两边都没有字符串,但一边有对象,将对象转换成字符串,然后按照上面规则进行</li>
</ul>
<h1 id="自增和自减"><a href="#自增和自减" class="headerlink" title="自增和自减"></a>自增和自减</h1><h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><p>一元运算符</p>
<p>++:将某个变量的值自增 1</p>
<p>–:将某个变量的值自减 1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">x++;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">//值为1</span></span><br><span class="line"><span class="comment">//x-- (同理)</span></span><br></pre></td></tr></table></figure>

<h2 id="细节-1"><a href="#细节-1" class="headerlink" title="细节"></a>细节</h2><h3 id="自增自减表达式"><a href="#自增自减表达式" class="headerlink" title="自增自减表达式"></a>自增自减表达式</h3><p>x++:将变量 x 自增,得到的表达式的值是自增之前的值.<br>x–:将变量 x 自减,得到的表达式的值是自减之前的值.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x++); <span class="comment">//值为0</span></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">//值为1</span></span><br></pre></td></tr></table></figure>

<p>++X:将变量 x 自增 1,得到的表达式的值是自增之后的值<br>++X:将变量 x 自减 1,得到的表达式的值是自减之后的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(++x); <span class="comment">//值为1</span></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">//值为1</span></span><br></pre></td></tr></table></figure>

<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>从高到低:</p>
<ol>
<li><code>++ --</code></li>
<li><code>* / %</code></li>
<li><code>+ -</code></li>
</ol>
<p>优先级运算细节:</p>
<ol>
<li>从左到右依次查看</li>
<li>如果遇到操作数,将数据的值直接取出</li>
<li>如果遇到相邻的两个运算符,并且左边的运算符优先级大于等于右边的运算符,则直接运行左边的运算符.</li>
</ol>
<h1 id="比价运算符"><a href="#比价运算符" class="headerlink" title="比价运算符"></a>比价运算符</h1><p>大小比较:<code>&gt; &lt; &gt;= &lt;=</code></p>
<p>相等比较:<code>== === != !==</code></p>
<p><strong>比较运算符的返回类型:Boolean</strong></p>
<p><strong>算数运算符优先级高于比较运算符</strong></p>
<h2 id="大小比较"><a href="#大小比较" class="headerlink" title="大小比较"></a>大小比较</h2><h3 id="细节-2"><a href="#细节-2" class="headerlink" title="细节"></a>细节</h3><ol>
<li><p>两个字符串比较大小,比较的是字符串的字符编码(ASCLL 码).</p>
</li>
<li><p>如果一个不是字符串,并且两个都是原始类型,将它们都转换为数字进行比较</p>
</li>
<li><p>NaN 与任何数字比较,得到的结果都是 false</p>
</li>
<li><p>Infinity 比任何数字都大</p>
</li>
<li><p>-Indinity 比任何数字都小</p>
</li>
<li><p>如果其中一个是对象,将对象转换成为原始类型后,按照规则 1 或规则 2 进行比较</p>
</li>
</ol>
<p>目前,对象转换为原始类型后,是字符串”[object object]”.</p>
<h2 id="相等比较"><a href="#相等比较" class="headerlink" title="相等比较"></a>相等比较</h2><h3 id="和-相等比较-和-不相等比较"><a href="#和-相等比较-和-不相等比较" class="headerlink" title="== 和 != (相等比较 和 不相等比较)"></a><code>==</code> 和 <code>!=</code> (相等比较 和 不相等比较)</h3><p><code>==</code>:比较两个数据是否相等<br><code>!=</code>:比较两个数据是否不相等</p>
<p><strong>细节</strong></p>
<ol>
<li><p>两端的类型相同,直接比较两个数据本身是否相同[两个对象比较地址]</p>
</li>
<li><p>两端类型不同</p>
</li>
</ol>
<p>1). null 和 undefined,它们之间相等,和其他原始类型比较,则不相等. <br>2). 其他原始类型,比较时先转换为数字,再进行比较. <br>3). NaN 与任何数字比较都是 false,包括自身 <br>4). Infinity 和-Infinity,只能和自身相等. <br>5). 对象比较时要先转换乘原始类型,在进行比较 \</p>
<p><strong>犹豫相等比较和不相等比较,对于不同类型的数据比较违反直觉,因此,通常我们不使用这种比较方式,而使用更加接近直觉的严格相等和严格不相等比较</strong></p>
<h3 id="和-严格相等-和-严格不相等"><a href="#和-严格相等-和-严格不相等" class="headerlink" title="=== 和 !== (严格相等 和 严格不相等)"></a><code>===</code> 和 <code>!==</code> (严格相等 和 严格不相等)</h3><p><code>===</code>:两端的数据和类型必须相同</p>
<p><code>!==</code>:两端的数据或类型不相同</p>
<ol>
<li>两端类型相同,规则和相等比较一致.</li>
<li>两端类型不同为 false</li>
</ol>
<h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><p>布尔运算符</p>
<h2 id="与-并且"><a href="#与-并且" class="headerlink" title="与(并且)"></a>与(并且)</h2><p>符号:<code>&amp;&amp;</code></p>
<p>书写方式: 表达式 1 &amp;&amp; 表达式 2</p>
<ol>
<li>将表达式 1 进行 Boolean 判定</li>
</ol>
<p>以下数据均判定为 false:</p>
<ol>
<li>null</li>
<li>undefined</li>
<li>false</li>
<li>NaN</li>
<li>‘’</li>
<li>0</li>
</ol>
<p>其他数据全部为真</p>
<ol start="2">
<li>如果表达式 1 的判定结果为假,则直接返表达式 1,而不执行表达式 2;否则返回表达式 2 的结果.(短路规则)</li>
</ol>
<h2 id="或"><a href="#或" class="headerlink" title="或"></a>或</h2><p>符号:<code>||</code></p>
<p>写法:表达式 1 || 表达式 2</p>
<ol>
<li><p>将表达式 1 进行 Boolean 判定</p>
</li>
<li><p>如果表达式 1 为真,直接返回表达式 1,不运行表达式 2;否则返回表达式 2</p>
</li>
</ol>
<h2 id="非"><a href="#非" class="headerlink" title="非"></a>非</h2><p>符号:<code>!</code></p>
<p>写法:!数据</p>
<p>一元运算符</p>
<ul>
<li>将数据的 Boolean 判定结果直接取反,非运算符一定返回 boolean 类型</li>
</ul>
<h1 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h1><p>书写方式: 表达式 1 ? 表达式 2 : 表达式 3</p>
<ol>
<li>对表达式 1 进行 boolean 判定</li>
<li>如果判定结果为真,返回表达式 2,否则返回表达式 3</li>
</ol>
<h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>写法: ``</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"ciki"</span>,</span><br><span class="line">  age: <span class="number">16</span>,</span><br><span class="line">  sex: <span class="string">"男"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">`名字:<span class="subst">$&#123;person.name&#125;</span>,年龄:<span class="subst">$&#123;person.age&#125;</span>,性别:<span class="subst">$&#123;person.sex&#125;</span>,目前:<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">    person.age &gt;= <span class="number">18</span> ? <span class="string">"已成年"</span> : <span class="string">"未成年"</span></span></span></span><br><span class="line"><span class="string"><span class="subst">  &#125;</span>`</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//名字:ciki,年龄:16,性别:男,目前:未成年</span></span><br></pre></td></tr></table></figure>

<h2 id="类型转化不会影响原本的数据"><a href="#类型转化不会影响原本的数据" class="headerlink" title="类型转化不会影响原本的数据"></a>类型转化不会影响原本的数据</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">"1"</span>,</span><br><span class="line">  y = x * <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">//值为2</span></span><br><span class="line"><span class="built_in">console</span>.log(x, <span class="keyword">typeof</span> x); <span class="comment">//值为1,类型为string</span></span><br></pre></td></tr></table></figure>

<h2 id="复合的赋值运算符"><a href="#复合的赋值运算符" class="headerlink" title="复合的赋值运算符"></a>复合的赋值运算符</h2><p>+= -= /= *= %= **=</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">x += <span class="number">3</span>; <span class="comment">//等同于x = x + 3;</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">a *= <span class="number">1</span> + <span class="number">2</span>; <span class="comment">//等同于 a = a * (1+2);</span></span><br></pre></td></tr></table></figure>

<h2 id="void-运算符"><a href="#void-运算符" class="headerlink" title="void 运算符"></a>void 运算符</h2><p>一元运算符</p>
<p>写法:</p>
<ol>
<li>普通写法:<code>void 表达式</code></li>
<li>函数写法:<code>void(表达式)</code></li>
</ol>
<p>运行表达式,然后返回 undefined</p>
<h2 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h2><p>一元运算符</p>
<p>写法:</p>
<ol>
<li>普通写法:<code>typeof 表达式</code></li>
<li>函数写法:<code>typeof(表达式)</code></li>
</ol>
<p>typeof 运算,返回表达式的类型,是一个字符串.</p>
<h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><p>写法:表达式 1,表达式 2</p>
<p>依次运行表达式,然后返回表达式 2 的结果</p>
<p>逗号运算符比赋值符号优先先级低</p>
<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="为什么-Js-的小数运算不精确"><a href="#为什么-Js-的小数运算不精确" class="headerlink" title="为什么 Js 的小数运算不精确"></a>为什么 Js 的小数运算不精确</h2><p>十进制小数,转换为二进制后,可能是无限小数,但是计算机对数字的存储能力有限,因此会丢失一些数据.</p>
<p>十进制数 0.3 -&gt; 0.010011001100110011001……..</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.3*2  0.6   0</span><br><span class="line">0.6*2  1.2   1</span><br><span class="line">0.2*2  0.4   0</span><br><span class="line">0.4*2  0.8   0</span><br><span class="line">0.8*2  1.6   1</span><br><span class="line">0.6*2  1.2   1</span><br><span class="line">0.2*2  0.4   0</span><br><span class="line">...</span><br><span class="line">整数部分从上往上看</span><br></pre></td></tr></table></figure>

<h2 id="Js-如何存储数字"><a href="#Js-如何存储数字" class="headerlink" title="Js 如何存储数字"></a>Js 如何存储数字</h2><p>整数法 浮点法</p>
<p>Js 中,存储所有的数字,都按浮点法存放.</p>
<p>浮点数存放数字,叫做浮点数(float),浮点数分为单精度和双精度.</p>
<p>Js 中,使用双精度存放浮点数,IEEE 754.</p>
<p><strong>存放方式</strong></p>
<p>Js 在计算机中,给每个数字开辟一个内存空间,存储固定为 64 位</p>
<blockquote>
<p>在计算机中,位(bit)是最小的存储单位,简称为 bit <br>1 byte(字节) = 8 bit <br>1kb = 1024 byte<br>1MB = 1024 kb<br>1GB = 1024 MB</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[第一段][第二段][第三段]</span><br><span class="line"></span><br><span class="line">第一段:1位,表示符号单位,如果为1,是负数,如果为0,是正数</span><br><span class="line">第二段:11位,表示指数位,这里的指数是指2为底的指数,而不是10</span><br><span class="line">第三段:52位,表示有效数字</span><br></pre></td></tr></table></figure>

<h1 id="求余和求模"><a href="#求余和求模" class="headerlink" title="求余和求模"></a>求余和求模</h1><h2 id="求余"><a href="#求余" class="headerlink" title="求余"></a>求余</h2><p>% : 求余</p>
<p>x % y</p>
<p>求余 x rem y : x - n * y,n 表示商取整(直接去掉小数,向 0 取整)</p>
<p>x = 7 , y = 3</p>
<p>n = x/y</p>
<p><strong>余数和被除数的符号相同</strong></p>
<h2 id="求模"><a href="#求模" class="headerlink" title="求模"></a>求模</h2><p>x mod y : x - n * y,n 表示商取整(向下取整)</p>
<h1 id="if-判断"><a href="#if-判断" class="headerlink" title="if 判断"></a>if 判断</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//以上条件都不满足执行的代码块</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<ol>
<li>如果条件满足,则忽略后面的所有条件</li>
<li>else if 可以有多个</li>
<li>else 可以有 1 个或 0 个</li>
<li>else 可以换行,可以不换行</li>
<li>如果代码块只有一条语句,可以省略花括号</li>
<li>if 只能出现一次</li>
</ol>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>用户输入:pormpt(“提示文本”);</p>
<p>该表达式的返回结果:</p>
<ol>
<li>null:表示用户点击了取消</li>
<li>用户输入的字符串:表示用户点击了确定,得到用户输入的结果</li>
</ol>
<p>返回类型:null 或 字符串</p>
<p>将字符串转换成数字:+字符串</p>
<h1 id="switch-开关"><a href="#switch-开关" class="headerlink" title="switch 开关"></a>switch 开关</h1><p>switch 的语法始终可以使用 if 结构替代.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">  <span class="keyword">case</span> 数据块:</span><br><span class="line">    代码块;</span><br><span class="line">  <span class="keyword">case</span> 数据块:</span><br><span class="line">    代码块;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    代码块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>计算表达式的返回值,依次 case 后面的数据进行严格相等的比较,如果某个相等,停止比较,然后运行运行其内部的代码块,再然后,依次运行之后的代码块.</li>
<li>在 case 分支内部,使用 break 语句,可以立即停止 switch 结构.</li>
<li>default 表示前面所有 case 都不匹配时运行,可以省略</li>
</ol>
<h1 id="循坏"><a href="#循坏" class="headerlink" title="循坏"></a>循坏</h1><p>重复的运行一段代码</p>
<p>Js 支持 3 种循坏结构:for 循坏,while 循坏,do-while 循坏</p>
<h2 id="while-循坏"><a href="#while-循坏" class="headerlink" title="while 循坏"></a>while 循坏</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件) &#123;</span><br><span class="line">  代码块(循坏体);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="do-while-循坏"><a href="#do-while-循坏" class="headerlink" title="do-while 循坏"></a>do-while 循坏</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  循环体;</span><br><span class="line">&#125; <span class="keyword">while</span> (条件);</span><br></pre></td></tr></table></figure>

<h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化表达式; 条件; 条件改变表达式) &#123;</span><br><span class="line">  循坏体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="循坏应用"><a href="#循坏应用" class="headerlink" title="循坏应用"></a>循坏应用</h1><h2 id="累计"><a href="#累计" class="headerlink" title="累计"></a>累计</h2><p>举例:将 1-100 的所有数字相加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">  sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">//5050</span></span><br></pre></td></tr></table></figure>

<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>举例:135~145 之间是否存在能整除 26 的数字</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isFind = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> min = <span class="number">135</span>,</span><br><span class="line">  max = <span class="number">165</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = min; i &lt;= max; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">25</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    isFind = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isFind) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"存在"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"不存在"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组用于存放多个数据</p>
<h2 id="创建一个数组"><a href="#创建一个数组" class="headerlink" title="创建一个数组"></a>创建一个数组</h2><ol>
<li>new Array(长度)</li>
</ol>
<p>长度,数组里面的数据总数,长度一定是个非负整数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>); <span class="comment">//创建一个长度为20的数组</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>

<p>new Array(数据,数据,数据…)</p>
<p>创建一个数组,并初始化其每一项的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="literal">null</span>, <span class="string">"2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr, <span class="keyword">typeof</span> arr); <span class="comment">//值为[1,1,1,null,"2"],object</span></span><br></pre></td></tr></table></figure>

<h2 id="认识数组的本质"><a href="#认识数组的本质" class="headerlink" title="认识数组的本质"></a>认识数组的本质</h2><p>数组的本质是一个对象</p>
<ul>
<li><p>length 属性:数组长度会自动变化,,值为最大下标加一</p>
</li>
<li><p>数字字符串属性:叫做下标,也叫做索引,相当于数组每个数据的编号,下标从 0 开始排列</p>
</li>
</ul>
<p>连续下标的取值范围:0 ~ length - 1,如果给 length 直接赋值,会导致数组直接被截断</p>
<p>实际开发中,不要给 length 赋值.</p>
<h2 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h2><p>通常情况下,下标是连续的.</p>
<p>下标不连续的数组,叫做稀松数组.</p>
<h2 id="数组的常见操作"><a href="#数组的常见操作" class="headerlink" title="数组的常见操作"></a>数组的常见操作</h2><h3 id="添加数组项"><a href="#添加数组项" class="headerlink" title="添加数组项"></a>添加数组项</h3><ol>
<li><p>数组[长度] = 数据 向数组末尾添加一个数据</p>
</li>
<li><p>数组.push(数据) 向数组末尾添加一个数据</p>
</li>
<li><p>数组.unshift(数据) 向数组起始位置添加一个数据,会导致数组每一项的下标向后移动.</p>
</li>
<li><p>数组.splice(下标,0,添加的数据);在指定下标位置开始,删除 0 个,然后再该位置插入添加的数据,如果下标超过范围,则按照范围边界进行处理.</p>
</li>
</ol>
<p>push|splice 和 unshift 可以添加多个数据</p>
<h2 id="删除数组"><a href="#删除数组" class="headerlink" title="删除数组"></a>删除数组</h2><ul>
<li><p>delete 数组[下标];这种做法不会导致数组其他的属性发生变化,因此,该做法会导致产生稀松数组.</p>
</li>
<li><p>数组.pop(),删除数组的最后一项,该表达十返回最后一项的数据</p>
</li>
<li><p>数组.shift():删除数组的第一项,该表达十返回第一项的数据</p>
</li>
<li><p>数组.splice(下标,删除的数量,添加的数据);在指定下标位置开始,删除指定的数量,然后再该位置插入添加的数据,如果下标超过范围,则按照范围边界进行处理.返回一个新数组,该数组记录被删除的数据.</p>
</li>
</ul>
<h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><ul>
<li>数组.slice(起始位置下标,结束位置下标) 从起始位置到结束位置的数据拿出来,得到一个新的数组,该函数不会改变原数组.注意结束下标取不到.</li>
</ul>
<p>下标可以取负数,如果是负数,则从末尾开始计算.</p>
<p>如果不写下标,则直接娶到末尾.</p>
<ul>
<li>数组清空</li>
</ul>
<p>数组.splice(0,数组.length);</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.splice(<span class="number">0</span>, arr.length);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//数组清空,长度为0</span></span><br></pre></td></tr></table></figure>

<p>数组.length = 0;</p>
<ul>
<li>查找数组某一项的下标</li>
</ul>
<p>数组.indexOf(数据)</p>
<p>从数组中依次查找对应数据,查找时使用严格相等进行比较.找到第一的匹配的下标,返回,如果没有找到,则返回-1.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> index = arr.indexOf(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index);</span><br><span class="line">输出<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>数组.lastIndexOf(数据)</p>
<p>功能和 indexOf 类似,只是找到的是最后一个匹配的下标</p>
<ul>
<li>数组.fill()</li>
</ul>
<p>数组.fill(数据);将数组所有项,填充为指定数据</p>
<p>数组.fill(数组,开始下标);将数组从开始下标,到数组末尾,填充为指定的数据</p>
<p>数组.fill(数组,开始下标,结束下标);将数组从开始下标,到数组结束下标(取不到),填充为指定的数据</p>
<h2 id="语法补充"><a href="#语法补充" class="headerlink" title="语法补充"></a>语法补充</h2><h3 id="in-关键字"><a href="#in-关键字" class="headerlink" title="in 关键字"></a>in 关键字</h3><p>判断某个属性在对象中是否存在:</p>
<p>属性名 in 对象</p>
<h3 id="for-in-foreach-循环"><a href="#for-in-foreach-循环" class="headerlink" title="for-in foreach 循环"></a>for-in foreach 循环</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> 对象) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>取出对象的所有属性名,每次循环将其中一个属性名赋值给变量 prop,运行循环体</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">32</span>,</span><br><span class="line">  c: <span class="string">"11"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prop); <span class="comment">//打印出a,b,c</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用该特点,可以实现数组的遍历</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[index]); <span class="comment">//打印出1,3,3,4,6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h1><p>重复代码:让程序难以维护</p>
<p>函数主要用于重复代码</p>
<h2 id="创建-声明-定义-函数"><a href="#创建-声明-定义-函数" class="headerlink" title="创建(声明,定义)函数"></a>创建(声明,定义)函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数体的代码不会直接执行,必须要手动调用函数,才能运行其中的代码.</p>
<h2 id="如何调用函数"><a href="#如何调用函数" class="headerlink" title="如何调用函数"></a>如何调用函数</h2><p>运行函数体</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">函数名();</span><br></pre></td></tr></table></figure>

<h2 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h2><p>通过字面量声明的函数,会提升到脚本块的顶部.</p>
<p>通过字面量声明的函数,会成为全局对象的属性.</p>
<h2 id="其他特点"><a href="#其他特点" class="headerlink" title="其他特点"></a>其他特点</h2><p>通过 typeof 函数名,得到的结果是 “function”</p>
<p>函数内部声明的变量:</p>
<ol>
<li><p>如果不使用 var 声明,和全局变量一致,表示给全局对象添加属性</p>
</li>
<li><p>如果使用 var 声明,变量提升到所在函数的顶部,函数外部不能使用该变量</p>
</li>
</ol>
<p><strong>函数声明的变量,仅能在函数中使用,在外部无效</strong></p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>参数表示函数运行的未知条件,需要调用者告知参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数的有效范围只有在函数体有效</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参<span class="number">1</span>,形参<span class="number">2</span>,...</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">函数名(实参)</span><br></pre></td></tr></table></figure>

<p>如果实参没有传递,则对应的形参为 undefined</p>
<p>例子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOod</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;n&#125;</span>不是奇数`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;n&#125;</span>是奇数`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无通用性</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  isOod(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>函数运行后,得到的结果,调用函数时,调用表达式的值就是函数的返回值</p>
<p>例子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOod</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">45</span>, <span class="number">7</span>, <span class="number">43</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>];</span><br><span class="line"><span class="comment">//计算奇数的和</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isOod(arr[i])) &#123;</span><br><span class="line">    sum += arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure>

<p>return 会直接结束整个函数的运行</p>
<p>return 后面如果不更任何数据,返回 undefined</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对一个数组求和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumOfArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    sum += arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">13</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> sum = sumOfArray(num1);</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure>

<h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h1 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>JS 中,有两种作用域</p>
<p>作用域表示一个代码区域,也表示一个运行坏境</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">作用域：(全局作用域 and 局部作用域)；</span><br><span class="line">    <span class="number">1.</span>执行期上下文:</span><br><span class="line">      当函数执行时，会创建一个称为执行期上下文的内部对象。一个执行期上下文定义了一个函数执行时的环境，</span><br><span class="line">      函数每次执行时对应的执行上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文，</span><br><span class="line">      当函数执行完毕，它所产生的执行上下文被销毁。</span><br><span class="line">    <span class="number">2.</span>查找变量:从作用域链的顶端依次向下查找；</span><br><span class="line">    scope:作用域;</span><br><span class="line">    例子：</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                &#125;</span><br><span class="line">                c();</span><br><span class="line">            &#125;</span><br><span class="line">            b();</span><br><span class="line">        &#125;</span><br><span class="line">        c();</span><br><span class="line"></span><br><span class="line">        a defined a.[[scope]] --&gt; <span class="number">0</span> : GO</span><br><span class="line">        a doing   a.[[scope]] --&gt; <span class="number">0</span> : aAO</span><br><span class="line">                                  <span class="number">1</span> : GO</span><br><span class="line"></span><br><span class="line">        b defined b.[[scope]] --&gt; <span class="number">0</span> : aAO</span><br><span class="line">                                  <span class="number">1</span> : GO</span><br><span class="line">        b doing   b.[[scope]] --&gt; <span class="number">0</span> : bAO</span><br><span class="line">                                  <span class="number">1</span> : aAO</span><br><span class="line">                                  <span class="number">2</span> : GO</span><br><span class="line"></span><br><span class="line">        c defined c.[[scope]] --&gt; <span class="number">0</span> : bAO</span><br><span class="line">                                  <span class="number">1</span> : aAO</span><br><span class="line">                                  <span class="number">2</span> : GO</span><br><span class="line">        c doing   c.[[scope]] --&gt; <span class="number">0</span> : cAO</span><br><span class="line">                                  <span class="number">1</span> : bAO</span><br><span class="line">                                  <span class="number">2</span> : aAO</span><br><span class="line">                                  <span class="number">3</span> : GO</span><br></pre></td></tr></table></figure>

<ol>
<li>全局作用域</li>
</ol>
<p>直接在脚本中书写的代码</p>
<p>在全局作用域中声明变量,会被提升到脚本块的顶部,并且会成为群居对象的属性</p>
<ol start="2">
<li>局部作用域</li>
</ol>
<p>函数中的代码</p>
<p>在函数作用域中声明变量,会被提升到函数的顶部,并且不会成为全局对象的属性,因此,函数中声明的变量,不会导致全局对象的污染</p>
<p><strong>尽量的把功能封装在函数中</strong></p>
<p>但是,当函数成为一个表达式时,它既不会提升,也不会污染全局对象.</p>
<p>将函数变成一个函数表达式的方法之一:将函数用小括号括起来.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">形参</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//代码块</span></span><br><span class="line">&#125;)(实参);</span><br></pre></td></tr></table></figure>

<p>然而,这样一来,函数就无法通过名称调用.</p>
<p>如果书写一个`函数表达式,然后立即调用,该函数称之为立即执行函数 IIFE (Imdiately Invoked Function Expression).</p>
<p>由于大部分情况下,函数表达式的函数名没有实际的意义,因此,可以省略函数名.</p>
<p>没有名字的函数,称之为匿名函数</p>
<h2 id="作用域中可以使用的变量"><a href="#作用域中可以使用的变量" class="headerlink" title="作用域中可以使用的变量"></a>作用域中可以使用的变量</h2><p>全局作用域,只能使用全局作用域中声明的变量(包括函数)</p>
<p>函数作用域不仅能使用自身作用域中声明的变量(包括函数),还能使用外部坏境的变量(包括函数)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">9</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">8</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">//9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//error</span></span><br></pre></td></tr></table></figure>

<p>有的时候,某个函数比较复杂,在编写的过程中,可能需要另一些函数来辅助它完成一些功能,而这些函数仅仅会被该函数使用,,则可以将这些函数声明到该函数的内部.</p>
<p>函数内部声明的变量和外部冲突,使用内部的.</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包:当一个内部函数被其他外部函数之外的变量引用时，就形成了一个闭包。</p>
<p>实现：</p>
<pre><code>a.定义普通函数A

b.在A中定义普通函数B

c.在A中返回B

d.执行 A，并把 A 的返回结果赋值给变量 C

e.执行 C</code></pre><p>例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"hello world!!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> C = A();</span><br><span class="line">C();</span><br></pre></td></tr></table></figure>

<p>闭包的作用：</p>
<p>a.实现公有变量</p>
<p>b.可以做缓存</p>
<p>c.可以实现封装，属性私有化</p>
<p>d.模块化开发，防止污染全局变量</p>
<h1 id="函数表达式和-this"><a href="#函数表达式和-this" class="headerlink" title="函数表达式和 this"></a>函数表达式和 this</h1><h2 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h2><p>Js 中,函数也是一个数据,语法上,函数可以用于任何需要数据的地方</p>
<p>函数是一个引用类型,将其赋值给某个变量时,变量中保存的时函数的地址</p>
<h2 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h2><blockquote>
<p>this 无法赋值</p>
</blockquote>
<ol>
<li>在全局作用域中,this 关键字固定指向全局对象.</li>
<li>在函数作用域中,取决于函数是如何被调用的.<ol>
<li>函数直接调用,this 指向全局对象</li>
<li>通过一个对象调用,格式为<code>对象.属性()</code>或<code>对象[&quot;属性&quot;]</code>,this 指向对象</li>
</ol>
</li>
</ol>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><blockquote>
<p>对象中的属性,如果是一个函数,也称该属性为对象的方法</p>
</blockquote>
<h2 id="用于创建对象的函数"><a href="#用于创建对象的函数" class="headerlink" title="用于创建对象的函数"></a>用于创建对象的函数</h2><p>用函数创建对象,可以减少繁琐的对象创建流程</p>
<ol>
<li>函数返回一个对象</li>
<li>构造函数:构造函数专门用于创建对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 函数名(参数);</span><br></pre></td></tr></table></figure>

<p>如果使用上面的格式创建对象,则该函数叫做构造函数.</p>
<ol>
<li>函数名使用大驼峰命名法</li>
<li>构造函数内部,会自动创建一个对象,this 指向新创建的对象,并且自动返回新对象.</li>
<li>构造函数中如果出现返回值,如果返回的是原始类型,则直接忽略,如果返回的是引用类型,则使用返回的结果.</li>
<li>所有对象,最终都是通过构造函数创建</li>
</ol>
<h2 id="new-target"><a href="#new-target" class="headerlink" title="new.target"></a>new.target</h2><p>该表达式在函数中使用,返回的是当前的构造函数,但是,如果该函数不是通过 new 调用的,则返回 undefined</p>
<p>通常用于判断某个函数是否是通过 new 调用.</p>
<h1 id="函数的本质"><a href="#函数的本质" class="headerlink" title="函数的本质"></a>函数的本质</h1><p>函数的本质就是对象.</p>
<blockquote>
<p>所有的对象都是通过关键字 new 出来的,<code>new 构造函数</code></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="number">2</span>,</span><br><span class="line">  y: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.x = <span class="number">2</span>;</span><br><span class="line">obj.y = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// ===========分割线===========</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">4</span>;</span><br></pre></td></tr></table></figure>

<p>所有的函数都是通过<code>new Function</code>创建的</p>
<blockquote>
<p>Function</p>
</blockquote>
<p>由于函数本身是对象,因此函数中,可以拥有各种属性.</p>
<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>Js 为了增强原始类型的功能,为 boolean,string,number 分别创建了一个构造函数</p>
<ol>
<li>Boolean</li>
<li>String</li>
<li>Number</li>
</ol>
<p>如果语法上,将原始类型当作对象使用时(一般是再使用属性时),Js 会自动再该位置利用对应的构造函数,创建对象来访问原始类型的属性.</p>
<blockquote>
<p>类:在 Js 中可以认为类就是构造函数</p>
</blockquote>
<blockquote>
<p>成员属性(方法),实例属性(方法):表示该属性是通过构造函数创建的对象调用的.</p>
</blockquote>
<blockquote>
<p>静态属性(方法),类属性(方法):表示该属性是通过构造函数本身调用的.</p>
</blockquote>
<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>函数直接或间接调用自身</p>
<p>避免无限递归,无限递归会导致执行栈溢出.</p>
<p>对比死循环</p>
<ul>
<li><p>死循环不会报错,也不会导致栈溢出</p>
</li>
<li><p>无限递归会导致栈溢出</p>
</li>
</ul>
<h2 id="执行栈"><a href="#执行栈" class="headerlink" title="执行栈"></a>执行栈</h2><p>任何代码的执行都必须有一个执行环境,执行环境为代码的执行提供支持.</p>
<p>执行环境是放到执行栈中的.</p>
<p>每个函数的调用,都需要创建一个函数的执行环境,函数调用结束,执行环境销毁</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>! = <span class="number">5</span>*<span class="number">4</span>*<span class="number">3</span>*<span class="number">2</span>*<span class="number">1</span></span><br><span class="line"></span><br><span class="line">f(n)</span><br><span class="line">f(<span class="number">1</span>) = <span class="number">1</span></span><br><span class="line">f(<span class="number">2</span>) = <span class="number">2</span>*f(<span class="number">1</span>)</span><br><span class="line">f(<span class="number">3</span>) = <span class="number">3</span>*f(<span class="number">2</span>)</span><br><span class="line">f(<span class="number">3</span>) = <span class="number">4</span>*f(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * f(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行栈有相对固定的大小,如果执行环境太多,执行栈无法容纳,会报错</p>
<h2 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h2><p>如果一个函数最后一条语句是调用函数,并且调用函数不是表达式的一部分,则该函数称之为尾调用,如果尾调用是调用自身函数,则称之为尾递归.</p>
<p>某些语言或执行环境会对尾调用进行优化,它们会立即销毁当前函数,避免执行栈空间被占用.</p>
<p>在浏览器环境中,尾调用没有优化.但在 nodejs 环境中有优化.</p>
<h1 id="标准库-标准-API"><a href="#标准库-标准-API" class="headerlink" title="标准库(标准 API)"></a>标准库(标准 API)</h1><ul>
<li>库:liberary</li>
<li>API:应用程序标准接口.Application Programing Interface</li>
<li>标准:ECMAScript 标准</li>
</ul>
<h2 id="Object-javascript-Object-MDN"><a href="#Object-javascript-Object-MDN" class="headerlink" title="Object (javascript Object MDN)"></a>Object (javascript Object MDN)</h2><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><ul>
<li><p>keys(某个对象),得到某个对象的所有属性名数组</p>
</li>
<li><p>value(某个对象),得到某个对象的所有属性值数组</p>
</li>
<li><p>entries(某个对象),得到某个对象的所有属性名和属性值的数组</p>
</li>
</ul>
<h3 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h3><blockquote>
<p>实例成员可以被重写</p>
</blockquote>
<p><strong>所有对象.都拥有 object 的所有成员</strong></p>
<ul>
<li>toString 方法:得到某个对象的字符串格式</li>
</ul>
<p>默认情况下,该方法返回”[object Object]”.</p>
<p>valueOf 方法:得到某个对象的值</p>
<p>默认情况下返回对象的本身</p>
<p>在 Js 中,当自动的进行类型转换时,如果要对一个对象进行转换,实际上是先调用对象的 valueOf 方法,然后调用返回结果的 toString 方法,将得到的结果进行进一步的转换.</p>
<h2 id="Function-javascript-Function-MDN"><a href="#Function-javascript-Function-MDN" class="headerlink" title="Function (javascript Function MDN)"></a>Function (javascript Function MDN)</h2><p><strong>所有函数都具有 Function 中的实例成员</strong></p>
<p><strong>语法:arguments:在函数中使用,获取该函数调用时,传递的所有参数</strong></p>
<p><strong>arguments 是一个类数组(也称之为伪数组:没有通过 Array 构造函数创建的类似于数组结构的对象),伪数组会缺失大量的数组实例方法</strong></p>
<p><strong>arguments 数组中的值,会对应的形参映射</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="string">"abc"</span>;</span><br><span class="line">  b = <span class="number">123</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b); <span class="comment">//值为abc 123</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">  test(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实例成员-1"><a href="#实例成员-1" class="headerlink" title="实例成员"></a>实例成员</h3><ul>
<li>length 属性,得到函数形参的数量</li>
<li>apply 方法::调用函数,同时指定函数中的 this 指向(参数能以数组的形式传入)</li>
<li>call 方法:调用函数,同时指定函数中的 this 指向(参数能以列表的形式传入)</li>
<li>bind 方法:得到一个新函数,该函数中的 this 始终指向指定的值.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">  <span class="built_in">console</span>.log(a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> user1 = &#123;</span><br><span class="line">  name: <span class="string">"afd"</span>,</span><br><span class="line">  age: <span class="number">12</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> user2 = &#123;</span><br><span class="line">  name: <span class="string">"sdf"</span>,</span><br><span class="line">  age: <span class="number">13</span></span><br><span class="line">&#125;;</span><br><span class="line">sayHello.apply(user1, [<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line">sayHello.call(user2, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> newFunc = sayHello.bind(user1, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">newFunc();</span><br></pre></td></tr></table></figure>

<p>通常,可以利用 apply,call 方法,将某个伪数组转换成真数组.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="comment">//将arguments转换为真数组</span></span><br><span class="line">  <span class="keyword">var</span> newArray = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(newArray); <span class="comment">//将得到一个真数组,有实例方法</span></span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">12</span>, <span class="number">34</span>, <span class="number">65</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">12</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Array-构造器"><a href="#Array-构造器" class="headerlink" title="Array 构造器"></a>Array 构造器</h1><p>凡是通过 Array 构造函数创建地对象,都是数组</p>
<h2 id="静态成员-1"><a href="#静态成员-1" class="headerlink" title="静态成员"></a>静态成员</h2><ul>
<li>form 方法:可以将伪数组转换为真数组</li>
<li>ifArray 方法,判断一个给定地数组,是否为一个真数组</li>
<li>of 方法:类似于中括号创建数组,依次赋予数组每一项地值</li>
</ul>
<h2 id="实例成员-2"><a href="#实例成员-2" class="headerlink" title="实例成员"></a>实例成员</h2><ul>
<li><p>fill 方法:将数组中指定区间所有元素地值,都替换成某个固定地值</p>
</li>
<li><p>pop 方法:删除数组最后一个元素,并返回这个元素.</p>
</li>
<li><p>push 方法:在数组地末尾增加一个或多个元素,并返回数组地新长度</p>
</li>
<li><p>reverse 方法:将当前数组颠倒顺序</p>
</li>
<li><p>shift 方法:删除数组的第一个元素,并返回这个元素</p>
</li>
<li><p>sort 方法:对数组元素进行排序,并返回当前数组(根据字符串 Unicode 码点进行排序)</p>
</li>
<li><p>splice 方法:在任意位置给数组添加或删除任意个元素.</p>
</li>
<li><p>unshift 方法:在数组的开头增加一个或多个元素,并返回数组的新长度</p>
</li>
</ul>
<p>纯函数,无副作用函数:不会导致当前对象发生改变</p>
<ul>
<li><p>concat 方法:返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组</p>
</li>
<li><p>includes:判断当前数组是否包含某指定的值，如果是返回 true，否则返回 false。</p>
</li>
<li><p>join 方法:连接所有数组元素组成一个字符串。</p>
</li>
<li><p>slice 方法:抽取当前数组中的一段元素组合成一个新数组。</p>
</li>
<li><p>indexOf 方法:返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1</p>
</li>
<li><p>lastIndexOf 方法:返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1</p>
</li>
<li><p>forEach 方法:为数组中每个元素执行一次回调函数.</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">64</span>, <span class="number">6</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, i, a</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//item:值,i:下标,a:数组</span></span><br><span class="line">  <span class="built_in">console</span>.log(item, i, a);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>every:是否所有元素都满足条件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">60</span>, <span class="number">79</span>, <span class="number">67</span>, <span class="number">86</span>, <span class="number">90</span>];</span><br><span class="line"><span class="comment">// 判断是否所有同学都及格</span></span><br><span class="line"><span class="keyword">var</span> result = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//item:值</span></span><br><span class="line">  <span class="keyword">return</span> item &gt;= <span class="number">60</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<ul>
<li><p>some:是否至少有一个元素满足条件</p>
</li>
<li><p>filter:过滤,得到满足条件的元素组成的新数组</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">45</span>, <span class="number">76</span>, <span class="number">34</span>, <span class="number">12</span>, <span class="number">89</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item &lt; <span class="number">60</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">//[45, 34, 12]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>find:查找第一个满足条件的元素,返回元素本身,如果没有找到这返回 undefined.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"zh"</span>,</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">    sex: <span class="string">"男"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"za"</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    sex: <span class="string">"男"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"zad"</span>,</span><br><span class="line">    age: <span class="number">19</span>,</span><br><span class="line">    sex: <span class="string">"女"</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> result = arr.find(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<ul>
<li>findIndex:查找第一个满足条件的元素,返回元素的下标,如果没有找到则返回-1.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"zh"</span>,</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">    sex: <span class="string">"男"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"za"</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    sex: <span class="string">"男"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"zad"</span>,</span><br><span class="line">    age: <span class="number">19</span>,</span><br><span class="line">    sex: <span class="string">"女"</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> index = arr.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(index);</span><br></pre></td></tr></table></figure>

<ul>
<li>map:映射,将数组的每一项映射称为另一项</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">33</span>, <span class="number">44</span>, <span class="number">57</span>, <span class="number">67</span>, <span class="number">23</span>];</span><br><span class="line"><span class="comment">//得到一个新数组,新数组的每一项是一个对象</span></span><br><span class="line"><span class="comment">//对象中包含两个属性:name,score</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: <span class="string">"学生"</span> + (i + <span class="number">1</span>),</span><br><span class="line">    score: item</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>

<ul>
<li>reduce:统计,累计</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">s, item</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s, item);</span><br><span class="line">  <span class="keyword">return</span> s + item;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链式编程:每一个函数调用返回的类型一致</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">22</span>, <span class="number">44</span>, <span class="number">66</span>, <span class="number">22</span>, <span class="number">88</span>, <span class="number">99</span>, <span class="number">55</span>, <span class="number">77</span>];</span><br><span class="line"><span class="comment">//先对数组进行随机排序</span></span><br><span class="line"><span class="comment">//只取及格分数</span></span><br><span class="line"><span class="comment">//得到学生对象的数组(每个对象包含姓名和分数)</span></span><br><span class="line"><span class="keyword">var</span> result = arr</span><br><span class="line">  .sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt;= <span class="number">60</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .map(<span class="function"><span class="keyword">function</span>(<span class="params">item, i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: <span class="string">"学生"</span> + (i + <span class="number">1</span>),</span><br><span class="line">      score: item</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>

<h1 id="原始类型包装器"><a href="#原始类型包装器" class="headerlink" title="原始类型包装器"></a>原始类型包装器</h1><ul>
<li>new 包装器(值):返回的是一个对象</li>
<li>包装器(值):返回的是一个原始类型</li>
</ul>
<p><strong>练习</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"500px"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">id</span>=<span class="string">"myTable"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>分数<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> myTable = <span class="built_in">document</span>.getElementById(<span class="string">"myTable"</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// nameL名字，gender:性别，score:分数</span></span></span><br><span class="line"><span class="actionscript">  <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">constructor</span>(name, gender, score) &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.name = name;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.gender = gender;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.score = score;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.mount();</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 将数据插入到表中</span></span></span><br><span class="line">    mount() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">"tr"</span>);</span></span><br><span class="line">      tr.innerHTML = `</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;this.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;this.gender&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;this.score&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span></span><br><span class="line">            `;</span><br><span class="line">      myTable.appendChild(tr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> my = <span class="keyword">new</span> Student(<span class="string">"王花花"</span>, <span class="string">"男"</span>, <span class="number">54</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> my1 = <span class="keyword">new</span> Student(<span class="string">"王八"</span>, <span class="string">"女"</span>, <span class="number">66</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> my2 = <span class="keyword">new</span> Student(<span class="string">"王二狗"</span>, <span class="string">"男"</span>, <span class="number">98</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> my3 = <span class="keyword">new</span> Student(<span class="string">"王四"</span>, <span class="string">"女"</span>, <span class="number">78</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><h3 id="静态成员-2"><a href="#静态成员-2" class="headerlink" title="静态成员"></a>静态成员</h3><ul>
<li>isNaN:判断一个值是不是 NaN</li>
<li>isFinite:判断一个数是不是有限的</li>
<li>isIntrger:确定传递的值类型是“number”，且是整数。</li>
<li>parseFloat:将一个数据转换为小数</li>
<li>parseInt:将一个数据转换为整数,直接转换成小数</li>
</ul>
<p>parseInt,parseFloat 要求参数是一个字符串,如果不是字符串,则会先转换为字符串.<br>从字符串开始位置进行查找,找到第一个有效的数字进行转换,如果没有找到,则返回 NaN,左右空白字符会忽略.</p>
<p>parseInt,可以传入第二个参数,表示将给定的字符串,识别为多少进制.</p>
<h3 id="实例成员-3"><a href="#实例成员-3" class="headerlink" title="实例成员"></a>实例成员</h3><ul>
<li>toFixed:返回用定点表示法表示数字的字符串,会有四舍五入.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3.1415926</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.toFixed(<span class="number">2</span>)); <span class="comment">//3.14</span></span><br></pre></td></tr></table></figure>

<ul>
<li>toPrecision:以指定的精度返回一个数字字符串</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">312.1415926</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.toPrecision(<span class="number">4</span>)); <span class="comment">//312.1</span></span><br></pre></td></tr></table></figure>

<h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><blockquote>
<p>String 全局对象是一个用于字符串或一个字符序列的构造函数。</p>
</blockquote>
<ul>
<li>\0 : 空字符</li>
<li>&#39; : 单引号</li>
<li>&quot; : 双引号</li>
<li>\ : 反斜杠</li>
<li>\n : 换行</li>
<li>\r : 回车</li>
<li>\v : 垂直制表符</li>
<li>\t : 水平制表符</li>
<li>\b : 退格</li>
<li>\f : 换页</li>
<li>\uXXXX unicode 码</li>
<li>\u{X} … \u{XXXXXX} unicode codepoint</li>
<li>\xXX Latin-1 字符(x 小写)</li>
</ul>
<h3 id="静态成员-3"><a href="#静态成员-3" class="headerlink" title="静态成员"></a>静态成员</h3><ul>
<li>fromCharCode:通过一串 Unicode 创建字符串</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">65</span>, <span class="number">66</span>)); <span class="comment">//"A,B"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>fromCodePoint:通过一串码点创建字符串</li>
</ul>
<h3 id="实例成员-4"><a href="#实例成员-4" class="headerlink" title="实例成员"></a>实例成员</h3><ul>
<li>length : 得到字符串长度</li>
</ul>
<blockquote>
<p>字符串是一个伪数组</p>
</blockquote>
<ul>
<li>charAt : 返回特定位置的字符串</li>
<li>charCodeAt : 返回给定索引的字符的 unicode 的值</li>
<li>concat : 将一个或多个字符串与原字符串连接合并,形成一个新的字符串并返回.</li>
<li>includes:判断一个字符串里是否包含其他字符串</li>
<li>endsWith : 判断一个字符串是否包含其他字符串中的字符</li>
<li>startsWith : 判断字符串的起始位置是否匹配其他字符串中的字符。</li>
<li>indexOf</li>
<li>lastIndexOf</li>
<li>match</li>
<li>padEnd : 在当前字符串尾部填充指定的字符串， 直到达到指定的长度。 返回一个新的字符串。</li>
<li>padStart : 在当前字符串头部填充指定的字符串， 直到达到指定的长度。 返回一个新的字符串。</li>
<li>padEnd : 在当前字符串尾部填充指定的字符串， 直到达到指定的长度。 返回一个新的字符串。</li>
<li>repeat : 返回指定重复次数的由元素组成的字符串对象。</li>
<li>replace : 被用来在正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串</li>
<li>对正则表达式和指定字符串进行匹配搜索，返回第一个出现的匹配项的下标。</li>
<li>slice : 摘取一个字符串区域，返回一个新的字符串。(位置可以是负数)</li>
<li>substr : 通过指定字符数返回在指定位置开始的字符串中的字符。(位置可以是负数)</li>
<li>substring : 返回在字符串中指定两个下标之间的字符。(不能为负,为负则转换成 0)</li>
<li>toLowerCase : 将字符串转换成小写并返回。</li>
<li>toUpperCase : 将字符串转换成大写并返回。</li>
<li>trim : 从字符串的开始和结尾去除空格</li>
<li>split : 通过分离字符串成字串，将字符串对象分割成字符串数组</li>
</ul>
<h1 id="Math-对象-Math-Javascript-MDN"><a href="#Math-对象-Math-Javascript-MDN" class="headerlink" title="Math 对象 (Math Javascript MDN)"></a>Math 对象 (Math Javascript MDN)</h1><p>Math 是一个内置对象， 它具有数学常数和函数的属性和方法。不是一个函数对象。</p>
<blockquote>
<p>常量:永远不会变化的数据.常量一般命名时所有字母大写,如果有多个单词,则用下划线分隔</p>
</blockquote>
<ul>
<li>reandom 方法: 产生一个 0~1 的随机数</li>
<li>PI 属性:得到圆周率</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.PI;</span><br></pre></td></tr></table></figure>

<ul>
<li>abs(x):返回 x 的绝对值</li>
<li>floor(x):返回小于 x 的最大整数(向下取整)。</li>
<li>ceil(x):返回大于 x 的最大整数(向上取整)。</li>
<li>max 方法:得到一组数字的最大值,如果无参,得到-infinite</li>
<li>min 方法:得到一组数字的最小值,如果无参,得到 infinite</li>
<li>round 方法:返回一个数字四舍五入后最接近的整数。</li>
<li>……</li>
</ul>
<h1 id="Date-构造器-Date-javascript-MDN"><a href="#Date-构造器-Date-javascript-MDN" class="headerlink" title="Date 构造器 (Date javascript MDN)"></a>Date 构造器 (Date javascript MDN)</h1><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ol>
<li>时间单位</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">年(year),</span><br><span class="line">月(month),</span><br><span class="line">日(date),</span><br><span class="line">小时(hour),</span><br><span class="line">分钟(minute),</span><br><span class="line">秒(second),  = <span class="number">1000</span>ms</span><br><span class="line">毫秒(millisecond,ms), = <span class="number">1000</span> us</span><br><span class="line">微秒(microsecond,us), = <span class="number">1000</span> ns</span><br><span class="line">纳秒(nanosecond,ns)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>UTC 和 GMT</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">世界划分为<span class="number">24</span>个时区,北京在东<span class="number">8</span>区,格林威治在<span class="number">0</span>时区</span><br><span class="line"></span><br><span class="line">UTC(Universal Time Coodinated) : 世界协调时,以原子时间为计时标准,精确到纳秒</span><br><span class="line">GMT(Greewish Mean Time)  : 格林威治世界时,根据太阳的自转与公转得出,太阳时,精确到毫秒</span><br><span class="line"></span><br><span class="line">UTC和GMT之间误差不超过<span class="number">0.9</span>秒</span><br><span class="line"></span><br><span class="line">+ 东   :   - 西</span><br><span class="line"></span><br><span class="line">GMT +<span class="number">0800</span> 东<span class="number">8</span>区</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>时间戳</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">数字</span><br><span class="line"></span><br><span class="line"><span class="number">1970</span><span class="number">-1</span><span class="number">-1</span> 凌晨 到 某个时间 所经过的毫秒数</span><br></pre></td></tr></table></figure>

<h2 id="创建时间对象"><a href="#创建时间对象" class="headerlink" title="创建时间对象"></a>创建时间对象</h2><ul>
<li>直接调用函数(不适用 new),忽略所有参数,直接返回当前时间的字符串</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span>(); <span class="comment">//"Wed Oct 09 2019 10:07:41 GMT+0800 (中国标准时间)"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>new Date():创建日期对象</li>
</ul>
<ol>
<li>无参,当前时间</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(date);</span><br><span class="line">(<span class="string">"Wed Oct 09 2019 10:07:41 GMT+0800 (中国标准时间)"</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>1 个参数,参数为数字,表示传入的是时间戳</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// Thu Jan 01 1970 08:00:01 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>两个参数以上,分别表示年,月,日,时,分,秒,毫秒</li>
</ol>
<blockquote>
<p>注意:月份的数字从 0 开始</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">200</span>);</span><br><span class="line"><span class="comment">// Sat Nov 09 2019 10:30:20 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>

<p>如果缺失参数,日期部分默认为 1,时分秒毫秒默认为 0</p>
<p>月,日,时,分,秒,毫秒,均可以传递负数,如果传递负数,会根据指定日期进行计算</p>
<h2 id="实例成员-5"><a href="#实例成员-5" class="headerlink" title="实例成员"></a>实例成员</h2><ul>
<li>getDate 方法:得到日期部分</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">//Wed Oct 09 2019 10:52:24 GMT+0800 (中国标准时间)</span></span><br><span class="line">d.getDate(); <span class="comment">//9</span></span><br></pre></td></tr></table></figure>

<ul>
<li>getDay 方法:根据本地时间返回指定日期对象的星期中的第几天（0-6）.0 表示星期天</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">//Wed Oct 09 2019 10:52:24 GMT+0800 (中国标准时间)</span></span><br><span class="line">d.getDay(); <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>getFullYear 方法:根据本地时间返回指定对象的年份(四位数年份时返回四位数字).</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">//Wed Oct 09 2019 10:52:24 GMT+0800 (中国标准时间)</span></span><br><span class="line">d.getFullYear(); <span class="comment">//2019</span></span><br></pre></td></tr></table></figure>

<ul>
<li>getHours 方法:根据本地时间返回指定日期对象的小时（0-23）.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">//Wed Oct 09 2019 10:52:24 GMT+0800 (中国标准时间)</span></span><br><span class="line">d.getHours(); <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<ul>
<li>getMinutes 方法:根据本地时间返回指定日期对象的分钟（0-59）</li>
<li>getSeconds 方法:得到秒部分</li>
<li>getMilliseconds 方法:得到毫秒部分</li>
<li>getTime 方法:得到时间戳</li>
<li>getMonth 方法:得到月,从 0 开始计算</li>
</ul>
<ul>
<li><p>setDate 方法:设置日期</p>
</li>
<li><p>setMonth 方法:设置月份</p>
</li>
<li><p>getFullYear 方法:设置年</p>
</li>
<li><p>setMinutes</p>
</li>
<li><p>setSeconds</p>
</li>
<li><p>setMilliseconds</p>
</li>
<li><p>setTime:从新设置时间戳</p>
</li>
<li><p>toDateString 方法:将日期部分转换为可读的字符串.</p>
</li>
<li><p>toISOString 方法:将整个对象转换为 ISO 标准的字符串格式.</p>
</li>
<li><p>toLocaleDateString 方法:根据当前系统的地区设置,将日期部分转换为可读的字符串</p>
</li>
<li><p>toLocaleString 方法:根据当前系统的地区设置,将整个日期对象转换为可读的字符串</p>
</li>
<li><p>toLocaleTimeString 方法:根据当前系统的地区设置,将时间部分转换为可读的字符串</p>
</li>
</ul>
<p><strong>友好的日期字符串</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 年-月-日 时:分:秒</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDateString</span>(<span class="params">date</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> year = date</span><br><span class="line">    .getFullYear()</span><br><span class="line">    .toString()</span><br><span class="line">    .padStart(<span class="number">4</span>, <span class="string">"0"</span>);</span><br><span class="line">  <span class="keyword">var</span> month = (date.getMonth() + <span class="number">1</span>).toString().padStart(<span class="number">2</span>, <span class="string">"0"</span>);</span><br><span class="line">  <span class="keyword">var</span> day = date</span><br><span class="line">    .getDate()</span><br><span class="line">    .toString()</span><br><span class="line">    .padStart(<span class="number">2</span>, <span class="string">"0"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hour = date</span><br><span class="line">    .getHours()</span><br><span class="line">    .toString()</span><br><span class="line">    .padStart(<span class="number">2</span>, <span class="string">"0"</span>);</span><br><span class="line">  <span class="keyword">var</span> minute = date</span><br><span class="line">    .getMinutes()</span><br><span class="line">    .toString()</span><br><span class="line">    .padStart(<span class="number">2</span>, <span class="string">"0"</span>);</span><br><span class="line">  <span class="keyword">var</span> hour = date</span><br><span class="line">    .getSeconds()</span><br><span class="line">    .toString()</span><br><span class="line">    .padStart(<span class="number">2</span>, <span class="string">"0"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;day&#125;</span> <span class="subst">$&#123;hour&#125;</span>:<span class="subst">$&#123;minute&#125;</span>:<span class="subst">$&#123;hour&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="日期的运算"><a href="#日期的运算" class="headerlink" title="日期的运算"></a>日期的运算</h2><p>日期对象重写了 object 中的 valueOf 方法,返回的是一个数字表示时间戳 <br><strong>(进行加号运算时,则是字符串拼接)</strong> <br>因此,日期对象可以进行数学运算</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    d1 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(d1 - d);</span><br><span class="line"><span class="built_in">console</span>.log(d1.valueOf()-d.valueOf()))</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 练习</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算还有多少天过生日</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; month 月</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; day 日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDaysToBirthday</span>(<span class="params">month, day</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> thisYear = now.getFullYear();</span><br><span class="line">  <span class="comment">//今年生日</span></span><br><span class="line">  <span class="keyword">var</span> birthday = <span class="keyword">new</span> <span class="built_in">Date</span>(thisYear, month - <span class="number">1</span>, day);</span><br><span class="line">  <span class="keyword">if</span> (birthday &lt; now) &#123;</span><br><span class="line">    birthday.setFullYear(now.getFullYear() + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> timeDec = birthday - now;</span><br><span class="line">  <span class="keyword">var</span> days = timeDec / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(days);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印当前月份的星期</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> m = now.getMonth() + <span class="number">1</span>;</span><br><span class="line">  <span class="comment">//得到这一年,这一个月的天数</span></span><br><span class="line">  <span class="keyword">var</span> y = now.getFullYear();</span><br><span class="line">  <span class="keyword">var</span> days = <span class="keyword">new</span> <span class="built_in">Date</span>(y, m, <span class="number">0</span>).getDate();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= days; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;y&#125;</span>年<span class="subst">$&#123;m&#125;</span>月<span class="subst">$&#123;i&#125;</span>日:星期<span class="subst">$&#123;getDayOfWeek(y, m, i)&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDayOfWeek</span>(<span class="params">year, month, day</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(year, month - <span class="number">1</span>, day);</span><br><span class="line">  <span class="keyword">var</span> day = d.getDay(); <span class="comment">//得到星期</span></span><br><span class="line">  <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"日"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"一"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"二"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"三"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"四"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"五"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"六"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">print();</span><br></pre></td></tr></table></figure>

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式是国际标准,跨越语言</p>
<p>正则表达式是一个规则,用于验证字符串.</p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ol>
<li>字面量匹配</li>
</ol>
<p>规则中直接书写字面量字符</p>
<ol start="2">
<li>特殊字符</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">^</span><br><span class="line">$</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>转义符</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\n</span><br><span class="line">\r</span><br><span class="line">\t</span><br><span class="line">\s</span><br><span class="line">\S</span><br><span class="line">\b</span><br><span class="line">\B</span><br><span class="line">\d</span><br><span class="line">\D</span><br><span class="line">\w</span><br><span class="line">\W</span><br><span class="line">\u</span><br></pre></td></tr></table></figure>

<p>转义符可以将特殊字符转义</p>
<ol start="4">
<li>字符集</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[字符范围]</span><br><span class="line">[^字符范围] 对字符范围取反</span><br></pre></td></tr></table></figure>

<p>匹配中文: [\u4e00 - \u9FA5]</p>
<ol start="5">
<li>量词</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">+</span><br><span class="line">?</span><br><span class="line">&#123;n&#125;:匹配n个</span><br><span class="line">&#123;n,&#125;:匹配&gt;=n个</span><br><span class="line">&#123;n,m&#125;:匹配n-m个</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>或者</li>
</ol>
<p>多个规则之间,适用或者<code>|</code>,表示多个规则任选其一</p>
<p>前面的规则出现的次数</p>
<h3 id="Js-中的应用"><a href="#Js-中的应用" class="headerlink" title="Js 中的应用"></a>Js 中的应用</h3><p>js 中,正则表达式表现为一个对象,该对象是通过构造函数 RegExp</p>
<h4 id="创建正则对象"><a href="#创建正则对象" class="headerlink" title="创建正则对象"></a>创建正则对象</h4><ol>
<li>字面量模式</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var regexp = /规则/;</span></span><br><span class="line"><span class="keyword">var</span> regexp = <span class="regexp">/^-?\d+(\.0+)?$/</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>构造函数模式</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regexp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^-?d+(.0+)?$"</span>);</span><br></pre></td></tr></table></figure>

<h4 id="正则实例成员"><a href="#正则实例成员" class="headerlink" title="正则实例成员"></a>正则实例成员</h4><ul>
<li>global</li>
<li>ignoreCase</li>
<li>multiline</li>
<li>source</li>
<li>test 方法:验证某个字符串是否满足规则</li>
<li>exec 方法:execute,执行匹配,返回执行结果</li>
</ul>
<blockquote>
<p>正则表达式,默认情况下,使用贪婪模式<br>在量词后,加上?,表示进入非贪婪模式</p>
</blockquote>
<h4 id="字符串中的正则方法-String-Javascript-MDN"><a href="#字符串中的正则方法-String-Javascript-MDN" class="headerlink" title="字符串中的正则方法 (String Javascript MDN)"></a>字符串中的正则方法 (String Javascript MDN)</h4><ul>
<li>match 方法:使用正则表达式与字符串相比较</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"sadds,dasdasd, sadasd\ndadsd\tdasda"</span>;</span><br><span class="line"><span class="keyword">var</span> result = s.match(<span class="regexp">/\d+/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s, result);</span><br></pre></td></tr></table></figure>

<ul>
<li>search 方法:对正则表达式和指定字符串进行匹配搜索，返回第一个出现的匹配项的下标</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"sadds,dasdasd, sadasd\ndadsd\tdasda"</span>;</span><br><span class="line"><span class="keyword">var</span> result = s.search(<span class="regexp">/\d+/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s, result);</span><br><span class="line">result = search(<span class="regexp">/\d+/g</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s, result);</span><br></pre></td></tr></table></figure>

<ul>
<li>split 方法(可以写正则表达式):通过分离字符串成字串，将字符串对象分割成字符串数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"sadds,dasdasd, sadasd\ndadsd\tdasda"</span>;</span><br><span class="line"><span class="keyword">var</span> result = s.split(<span class="regexp">/[,\-\s]/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s, result);</span><br></pre></td></tr></table></figure>

<ul>
<li>replace 方法;被用来在正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"sadds,dasdasd, sadasd\ndadsd\tdasda"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br><span class="line">s = s.replace(<span class="regexp">/\s*\b[a-z]\s*/g</span>,(match)=&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> match.toUpperCase().trim();</span><br><span class="line">&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将字符串中出现的敏感词替换为指定的字符串</span></span><br><span class="line"><span class="keyword">var</span> senWords = [<span class="string">"色情"</span>, <span class="string">"暴力"</span>, <span class="string">"反动"</span>, <span class="string">"1024"</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeSensitiveWords</span>(<span class="params">s, rep</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`(<span class="subst">$&#123;senWords.join(<span class="string">"|"</span>)&#125;</span>)+`</span>, <span class="string">"g"</span>);</span><br><span class="line">  <span class="keyword">return</span> s.replace(reg, rep);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(removeSensitiveWords(<span class="string">"abc1024dfsjf色情541024,暴力"</span>, <span class="string">"***"</span>));</span><br></pre></td></tr></table></figure>

<h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><h4 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a>捕获组</h4><p>用小括号包裹的部分叫做捕获组,捕获组会出现在匹配结果中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d[a-z])+/g</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"d1-23ad-s2ad-1ds-d21s"</span>;</span><br><span class="line"><span class="keyword">while</span> ((result = reg.exec(s))) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"2015-5-4,2019-6-19,2000-1-5"</span>;</span><br><span class="line"><span class="comment">//  得到每一个日期,并得到每个日期的年月日</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)/g</span>;</span><br><span class="line"><span class="keyword">while</span> ((result = reg.exec(s))) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>], result[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>捕获值可以命名,叫做具名捕获组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"2015-5-4,2019-6-19,2000-1-5"</span>;</span><br><span class="line"><span class="comment">//  得到每一个日期,并得到每个日期的年月日</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;1,2&#125;)-(?&lt;day&gt;\d&#123;1,2&#125;)/g</span>;</span><br><span class="line"><span class="keyword">while</span> ((result = reg.exec(s))) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">  <span class="built_in">console</span>.log(result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>], result[<span class="number">3</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(result.groups.year, result.groups.month, result.groups.day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>非捕获组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"2015-5-4,2019-6-19,2000-1-5"</span>;</span><br><span class="line"><span class="comment">//  得到每一个日期,并得到每个日期的年月日</span></span><br><span class="line"><span class="comment">// 非捕获组</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?:\d&#123;4&#125;)-(?:\d&#123;1,2&#125;)-(?:\d&#123;1,2&#125;)/g</span>;</span><br><span class="line"><span class="keyword">while</span> ((result = reg.exec(s))) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">  <span class="built_in">console</span>.log(result[<span class="number">0</span>], result[<span class="number">1</span>], result[<span class="number">2</span>], result[<span class="number">3</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(result.groups.year, result.groups.month, result.groups.day);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s = s.replace(reg, (match, g1, g2, g3) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(match, g1, g2, g3);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;match&#125;</span>/<span class="subst">$&#123;g1&#125;</span>/<span class="subst">$&#123;g2&#125;</span>/<span class="subst">$&#123;g3&#125;</span>`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></table></figure>

<h4 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h4><p>在正则表达式中,使用某个捕获组,<code>\捕获组编号</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// \1 引用之前的捕获组</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;2&#125;)\1/g</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"1313"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(s));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找出该字符串中连续的字符串</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"aaaaaaaaadfsdfsfaaaaabbbbbbbbbbgggggg"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?&lt;char&gt;\w)\k&lt;char&gt;+/g</span>;</span><br><span class="line"><span class="keyword">while</span> ((result = reg.exec(str))) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="正向断言-预查"><a href="#正向断言-预查" class="headerlink" title="正向断言(预查)"></a>正向断言(预查)</h4><p>检查某个字符串后面的字符是否满足某个规则,该规则不成为匹配结果,并且不称为捕获组</p>
<p><code>?=</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"hjkfdshfkjshfh231sf3sfdsf4s65fsf123sdf1s5"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-zA-Z](?=\d+)/g</span>;</span><br><span class="line"><span class="keyword">while</span> ((result = reg.exec(str))) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每隔三个字符添加一个逗号</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"1231561321"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\B(?=(\d&#123;3&#125;)+$)/g</span>;</span><br><span class="line">s = s.replace(reg, <span class="string">","</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></table></figure>

<h4 id="负向断言-预查"><a href="#负向断言-预查" class="headerlink" title="负向断言(预查)"></a>负向断言(预查)</h4><p>检查某个字符串后面的字符是否不满足某个规则,该规则不成为匹配结果,并且不称为捕获组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//得到后边没有数字的字母</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"asd111dasd555cxz555"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[a-zA-Z](?!\d+)/g</span>;</span><br><span class="line"><span class="keyword">while</span> ((result = reg.exec(s))) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断密码强度</span></span><br><span class="line"><span class="comment">// 要求密码中必须出现小写字母,大写字母,数字,特殊字符(!@#_,.)</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"24dsd45A."</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#_,.]).&#123;6,12&#125;$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(s));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断密码强度</span></span><br><span class="line"><span class="comment">// 密码长度必须是6-12位</span></span><br><span class="line"><span class="comment">// 出现小写字母,大写字母,数字,特殊字符(!@#_,.) -&gt; 强</span></span><br><span class="line"><span class="comment">// 出现小写字母,大写字母,数字 -&gt; 中</span></span><br><span class="line"><span class="comment">// 出现小写字母,大写字母 -&gt; 轻</span></span><br><span class="line"><span class="comment">// 其他 -&gt; 不满足要求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judgePwd</span>(<span class="params">pwd</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#_,.]).&#123;6,12&#125;$/</span>.test(pwd)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"强"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).&#123;6,12&#125;$/</span>.test(pwd)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"中"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^(?=.*[a-z])(?=.*[A-Z]).&#123;6,12&#125;$/</span>.test(pwd)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"轻"</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"不满足要求"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><p>Js 中的错误分为:</p>
<ol>
<li>语法错误:会导致<strong>整个</strong>脚本块无法执行,但不会影响其他的脚本块</li>
<li>运行错误<ol>
<li>运行报错:会导致当前脚本块后续代码无法执行</li>
<li>运行结果不符合预期</li>
</ol>
</li>
</ol>
<h2 id="调试错误"><a href="#调试错误" class="headerlink" title="调试错误"></a>调试错误</h2><ol>
<li>控制台打印</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b, <span class="keyword">typeof</span> a, <span class="keyword">typeof</span> b); <span class="comment">// a b string string</span></span><br><span class="line">  <span class="comment">//通过上述打印得知,两者皆为字符串不为数字,所以会导致字符串拼接,得不到正确的结果.可以使用Number()函数转换为数字,或在prompt()前加上一个加号,即可.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Number</span>(a) + <span class="built_in">Number</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> n1 = prompt(<span class="string">"请输入第一个数字:"</span>);</span><br><span class="line"><span class="keyword">var</span> n2 = prompt(<span class="string">"请输入第二个数字:"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum(n1, n2));</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>断点调试</li>
</ol>
<h2 id="抛出错误"><a href="#抛出错误" class="headerlink" title="抛出错误"></a>抛出错误</h2><p>错误在 Js 中本质上是一个对象,抛出错误的语法为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> 错误对象;</span><br></pre></td></tr></table></figure>

<p>错误对象的构造函数为 Error</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(n)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"必须是一个正常的数字"</span>);</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> flase;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (n % i === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(isPrime(<span class="number">6</span>));</span><br></pre></td></tr></table></figure>

<h2 id="捕获错误"><a href="#捕获错误" class="headerlink" title="捕获错误"></a>捕获错误</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 代码块1</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (错误对象) &#123;</span><br><span class="line">  <span class="comment">// 代码块2</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 代码块3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当运行代码块 1 的时候,如果发生错误.立即停止代码 1 的执行,转而执行代码块 2,错误对象为抛出的错误对象,无论代码 1 和代码 2 是否执行,最终都将执行代码 3</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  b();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"a1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    c();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b1"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"运行c的时候发生了问题"</span>, err);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"处理完成"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"dadadasdasd"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"c1"</span>);</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure>

<h1 id="web-api-概述"><a href="#web-api-概述" class="headerlink" title="web api 概述"></a>web api 概述</h1><p>标准库:ECMAscript 中的对象和函数</p>
<p>web Api:浏览器宿主环境中的对象和函数</p>
<p><strong>web Api 的特点:</strong></p>
<ol>
<li>知识繁杂</li>
<li>成体系的知识</li>
<li>程序思维: 知识+程序思维 = 应用</li>
<li>兼容性: 了解,不记忆</li>
</ol>
<p>web Api:</p>
<ul>
<li>BOM : Browser Object Model,浏览器对象模型</li>
<li>DOM : Document Object Model,文档对象模型</li>
</ul>
<p>BOM:控制浏览器的本身<br>DOM:控制 HTMl 文档</p>
<p>webApi 由 W3C(万维网联盟) 制定</p>
<h2 id="关于-DOM"><a href="#关于-DOM" class="headerlink" title="关于 DOM"></a>关于 DOM</h2><ul>
<li>DOM 0</li>
<li>DOM 1</li>
<li>DOM 2</li>
<li>DOM 3</li>
<li>DOM 4 2015 年</li>
</ul>
<p><strong>DOM 是什么?</strong></p>
<p>DOM 的核心理念,是将一个 HTML 或 XML 文档,用对象模型展示,每个对象称之为 dom 对象,dom 对象又称之为节点 Node</p>
<p><strong>节点类型:</strong></p>
<ul>
<li><strong>DocumentType</strong> 文档类型节点</li>
<li><strong>Document</strong> 文档节点 表示整文档</li>
<li><strong>Comment</strong> 注释节点</li>
<li><strong>Element</strong> 元素节点</li>
<li><strong>TEXT</strong> 文本节点</li>
<li><strong>Attrbuta</strong> 属性节点</li>
<li><strong>DocumentFragment</strong> 文档片段节点</li>
</ul>
<p>dom 树:文档中不同的节点形成的树形结构.</p>
<blockquote>
<p>全局对象 window 中有属性 document,代表的是整个文本节点</p>
</blockquote>
<h2 id="旧的获取元素节点的方式"><a href="#旧的获取元素节点的方式" class="headerlink" title="旧的获取元素节点的方式"></a>旧的获取元素节点的方式</h2><p>dom 0</p>
<ul>
<li>document.body 获取 body 元素节点</li>
<li>document.head 获取 head 元素节点</li>
<li>document.links 获取页面上所有的超链接元素节点,类(伪)数组</li>
<li>document.anchors 获取页面上所有的锚链接(具有 name 属性)元素节点</li>
<li>document.forms 获取页面上所有的 form 元素节点</li>
</ul>
<h2 id="新的获取元素节点的方式"><a href="#新的获取元素节点的方式" class="headerlink" title="新的获取元素节点的方式"></a>新的获取元素节点的方式</h2><h3 id="通过方法获取"><a href="#通过方法获取" class="headerlink" title="通过方法获取"></a>通过方法获取</h3><ul>
<li>document.getElementById(“ID”) 通过 id 获取对应 id 的元素</li>
<li>document.getElementsByTagName(“element”)[index] 通过元素名称获取元素</li>
<li>document.getElementByClassName(“className”) 通过元素的类样式获取元素,IE9 以下无效.</li>
<li>document.getElementsByName(“name”) 通过元素的 name 属性值获取元素</li>
<li>document.querySelector(“CSS 选择器”) 通过 css 元素选择器获取元素,得到匹配的第一个,IE8 以下无效</li>
<li>document.querySelectorAll(“CSS 选择器”) 通过 CSS 选择器获取元素,得到所有匹配的结果</li>
<li>document.documentElement 获取根元素</li>
</ul>
<p><strong>细节:</strong></p>
<ol>
<li>在所有的得到类数组的方法中,除了 querySelectorAll,其他得方法都是实时更新的.</li>
<li>getElementById,获取元素的执行效率最高.</li>
<li>书写了 id 的元素,会自动成为 window 对象的属性.它是一个实时的单对象.事实上得标准.不推荐使用.</li>
<li>getElementsByTagName,getElementByClassName,querySelector,querySelectorAll,可以作为其他元素节点对象的方法使用</li>
</ol>
<h3 id="根据节点关系获取节点"><a href="#根据节点关系获取节点" class="headerlink" title="根据节点关系获取节点"></a>根据节点关系获取节点</h3><ul>
<li>parentNode 获取父节点,父元素</li>
<li>previousSibling 返回当前节点的前一个兄弟节点,没有则返回 null.</li>
<li>nextSibling 返回其父节点的 childNodes 列表中紧跟在其后面的节点，如果指定的节点为最后一个节点，则返回 null。</li>
<li>childNodes 获取所有的子节点</li>
<li>firstChild:获取第一个子节点</li>
<li>lastChild: 获取最后一个子节点</li>
<li>attributes: 获取某个元素的属性节点</li>
</ul>
<p>获取<strong>元素</strong>节点</p>
<ul>
<li>parentElement: 获取父<strong>元素</strong></li>
<li>previousElementSibling: 获取上一个兄弟<strong>元素</strong></li>
<li>nextElementSibling: 获取下一个兄弟<strong>元素</strong></li>
<li>children:获取子<strong>元素</strong></li>
<li>firstElementChild:获取第一个子<strong>元素</strong></li>
<li>lastElementChild:获取最后一个子<strong>元素</strong></li>
</ul>
<h2 id="获取节点信息"><a href="#获取节点信息" class="headerlink" title="获取节点信息"></a>获取节点信息</h2><ul>
<li>nodeName:返回当前节点的节点名称</li>
<li>element.attributes:该元素所有属性节点的一个实时集合</li>
<li>nodeValue:获取节点的值</li>
<li>nodeType:节点类型,是一个数字</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">元素节点: <span class="number">1</span>;</span><br><span class="line">属性节点: <span class="number">2</span>;</span><br><span class="line">文本节点: <span class="number">3</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="dom-元素操作"><a href="#dom-元素操作" class="headerlink" title="dom 元素操作"></a>dom 元素操作</h2><h3 id="初识元素事件"><a href="#初识元素事件" class="headerlink" title="初识元素事件"></a>初识元素事件</h3><p>元素事件:某个元素发生一件事[点击:click,…]</p>
<p>事件处理程序:是一个函数,发生了一件事过后,该做什么事</p>
<p>注册事件:将事件处理程序与某个事件关联</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//注册事件</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// conding...</span></span><br><span class="line">  <span class="built_in">console</span>.log(count++)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="获取和设置元素属性"><a href="#获取和设置元素属性" class="headerlink" title="获取和设置元素属性"></a>获取和设置元素属性</h3><h4 id="可识别属性"><a href="#可识别属性" class="headerlink" title="可识别属性"></a>可识别属性</h4><p>正常的HTML属性</p>
<ul>
<li>dom对象.属性名</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"hello world"</span> /&gt;</span>&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btnGetTxt"</span>&gt;</span>获取文本框内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btnGetTxt"</span>)</span></span><br><span class="line"><span class="actionscript">  btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> input = <span class="built_in">document</span>.querySelector(<span class="string">"input[type=text]"</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(input.value)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>细节:</p>
<ul>
<li>正常的属性即使没有赋值,也有默认值</li>
</ul>
<h4 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h4><h3 id="获取和设置元素内容"><a href="#获取和设置元素内容" class="headerlink" title="获取和设置元素内容"></a>获取和设置元素内容</h3><h3 id="元素结构重构"><a href="#元素结构重构" class="headerlink" title="元素结构重构"></a>元素结构重构</h3><h3 id="创建和删除元素"><a href="#创建和删除元素" class="headerlink" title="创建和删除元素"></a>创建和删除元素</h3>]]></content>
  </entry>
  <entry>
    <title>hexo博客搭建</title>
    <url>/2019/10/29/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="hexo-博客搭建"><a href="#hexo-博客搭建" class="headerlink" title="hexo 博客搭建"></a>hexo 博客搭建</h1><ol>
<li>安装git(window)<ul>
<li><a href="https://github.com/git-for-windows/git/releases/download/v2.23.0.windows.1/Git-2.23.0-32-bit.exe" target="_blank" rel="noopener">Git32</a></li>
<li><a href="https://github.com/git-for-windows/git/releases/download/v2.23.0.windows.1/Git-2.23.0-64-bit.exe" target="_blank" rel="noopener">Git64</a></li>
</ul>
</li>
<li>安装nodejs(window)<ul>
<li><a href="https://npm.taobao.org/mirrors/node/v12.13.0/node-v12.13.0-x86.msi" target="_blank" rel="noopener">NodeJs32</a></li>
<li><a href="https://npm.taobao.org/mirrors/node/v12.13.0/node-v12.13.0-x64.msi" target="_blank" rel="noopener">NodeJs64</a></li>
</ul>
</li>
</ol>
<h2 id="注册一个github账号"><a href="#注册一个github账号" class="headerlink" title="注册一个github账号"></a>注册一个github账号</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 流程</span></span><br><span class="line">头像 =&gt; your repositories =&gt; <span class="keyword">new</span> (创建一个新的仓库,并以<span class="string">"用户名.github.io"</span>作为库的名称,创建仓库)</span><br><span class="line"><span class="comment">//可以使用自己的域名,没有则默认使用"用户名.github.io"的域名</span></span><br></pre></td></tr></table></figure>

<h2 id="配置ssh-Key"><a href="#配置ssh-Key" class="headerlink" title="配置ssh Key"></a>配置ssh Key</h2><ul>
<li>在桌面右键打开git输入以下命令</li>
</ul>
<blockquote>
<p> ssh-keygen -t rsa -C “github邮箱”</p>
</blockquote>
<ol>
<li><p>打开用户目录,找到.ssh\id_rsa.pub文件,使用记事本或其他的文本编辑器打开,复制其中的内容</p>
</li>
<li><p>打开github主页按照以下流程操作</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">头像 =&gt; your repositories =&gt; <span class="string">"用户名.github.io"</span> =&gt; <span class="function"><span class="params">settings</span> =&gt;</span> Deploy keys =&gt; add deploy key =&gt; 随便一个title,将id_rsa.pub的内容粘贴进去. =&gt; 保存</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试是否成功(在git中测试)</li>
</ol>
<blockquote>
<p> ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> //邮箱不用更改</p>
</blockquote>
<blockquote>
<p>如提示Are you sure you want to continue connecting (yes/no)? 输入yes即可</p>
</blockquote>
<p>看到如下内容则说明配置成功</p>
<blockquote>
<p>Hi murlioto/murlioto.github.io! You’ve successfully authenticated, but GitHub does not provide shell access.</p>
</blockquote>
<p>还需配置以下内容:</p>
<blockquote>
<p>git config –global user.name “github用户名”</p>
</blockquote>
<blockquote>
<p>git config –global user.eamil “github邮箱” </p>
</blockquote>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><ol>
<li><p>进入nodejs目录(即你nodejs所在的目录)</p>
</li>
<li><p>右键使用git,输入以下命令</p>
</li>
</ol>
<blockquote>
<p>npm install -g hexo</p>
</blockquote>
<ol start="3">
<li>使用以下命令查看hexo是否安装成功</li>
</ol>
<blockquote>
<p>hexo –version</p>
</blockquote>
<ol start="4">
<li><p>在电脑上创建一个名为blog的文件夹使用以下命令:(名字可以随便命名,尽可能的不使用中文命名),hexo会自动下载一些文件到这个目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
</li>
<li><p>下载完成后使用以下这些命令</p>
</li>
</ol>
<blockquote>
<p>hexo g  #生成页面</p>
</blockquote>
<blockquote>
<p>hexo s #启动本地预览服务</p>
</blockquote>
<ol start="6">
<li><p>当上面两条输入成功后进入<a href="http://localhost:4000/即可看到(本地)页面" target="_blank" rel="noopener">http://localhost:4000/即可看到(本地)页面</a></p>
</li>
<li><p>如果端口冲突可以使用以下命令更换端口</p>
</li>
</ol>
<blockquote>
<p>hexo s -p 端口</p>
</blockquote>
<h2 id="修改主题-并-上传到github"><a href="#修改主题-并-上传到github" class="headerlink" title="修改主题 并 上传到github"></a>修改主题 并 上传到github</h2><ol>
<li>下载主题(使用git,在存放blog的目录下使用)</li>
</ol>
<blockquote>
<p>git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</p>
</blockquote>
<ol start="2">
<li>在blog目录下打开站点配置文件(_config.yml),使用任意编辑器打开,找到theme,将其属性值修改为next(即下载主题的名称),在使用以下命令查看新的主题页面</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean #清除</span><br><span class="line">hexo g #生成</span><br><span class="line">hexo s #启动本地预览服务</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>具体的主题设置可以观看Next官方文档进行配置</p>
</li>
<li><p>上传到github</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开站点配置文件(_config.yml) =&gt; 修改以下内容 #注意冒号前一定要加空格</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>安装一个插件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>使用以下命令(从上往下)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">git config --global user.name &quot;github用户名&quot;</span><br><span class="line">git config --global user.eamil &quot;github邮箱&quot; </span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line">显示以下内容即可在任意设备(网络)上访问啦!!</span><br><span class="line">Branch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;https://github.com/murlioto/murlioto.github.io.git&apos;.</span><br><span class="line">INFO  Deploy done: git</span><br><span class="line"></span><br><span class="line">// 在浏览器中输入https://用户名.github.io/ 即可</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/10/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>ES6</title>
    <url>/2019/10/08/ES6/</url>
    <content><![CDATA[<h1 id="ECMA-Script-2015"><a href="#ECMA-Script-2015" class="headerlink" title="ECMA Script 2015"></a>ECMA Script 2015</h1><blockquote>
<p>ECMAScript 是Javascript的标准(语法规范),JS用于遵循这个规范</p>
</blockquote>
<p>兼容问题:ES6-&gt;Babel(转码工具)-&gt;ES5</p>
<h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a><strong>数组方法</strong></h2><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a><strong>forEach</strong></h3><blockquote>
<p>调用数组的每个元素，并将元素传递给回调函数,forEach() 对于空数组是不会执行回调函数的.</p>
</blockquote>
<ul>
<li>语法 : <strong>array.forEach(function(currentValue, index, arr), thisValue)</strong>   <ul>
<li>currentValue : 数组中正在处理的当前元素  </li>
<li>index : 数组中正在处理的当前元素的索引。 </li>
<li>array : forEach() 方法正在操作的数组。  </li>
<li>thisArg : 可选参数。当执行回调函数时用作 this 的值(参考对象)。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">6</span>];</span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map"></a><strong>map</strong></h3><blockquote>
<p>返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值,map需要返回值,如果不给return,默认返回undefined</p>
</blockquote>
<ul>
<li>语法 : <strong>new Map([iterable])</strong><ul>
<li>iterable : Iterable 可以是一个数组或者其他 iterable 对象，其元素为键值对(两个元素的数组，每个键值对都会添加到新的 Map , null 会被当做 undefined。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">var</span> b = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">    b.push(a[i]*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">var</span> doubled = a.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(doubled);</span><br></pre></td></tr></table></figure>

<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a><strong>filter</strong></h3><blockquote>
<p>方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 </p>
</blockquote>
<ul>
<li>语法 : <strong>array.filter(function(element,index,arr), thisValue)</strong><ul>
<li>element : 数组中当前正在处理的元素。</li>
<li>index : 正在处理的元素在数组中的索引。</li>
<li>array : 调用了 filter 的数组本身。</li>
<li>thisArg : 执行 callback 时，用于 this 的值。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取数组中指定类型的对象放到B数组中</span></span><br><span class="line"><span class="keyword">var</span> products = [</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">'cucumber'</span>,<span class="attr">type</span>:<span class="string">'vegetable'</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">'banana'</span>,<span class="attr">type</span>:<span class="string">'fruit'</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">'celery'</span>,<span class="attr">type</span>:<span class="string">'vegetable'</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">'orange'</span>,<span class="attr">type</span>:<span class="string">'fruit'</span>&#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> filteredProducts = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;products.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(products[i].type === <span class="string">'fruit'</span>)&#123;</span><br><span class="line">        filteredProducts.push(products[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(filteredProducts);</span><br><span class="line"><span class="comment">// es 6</span></span><br><span class="line"><span class="keyword">var</span> Newfruit = products.filter(<span class="function"><span class="keyword">function</span>(<span class="params">product</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> product.type === <span class="string">'fruit'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(Newfruit);</span><br></pre></td></tr></table></figure>

<h3 id="find"><a href="#find" class="headerlink" title="find"></a><strong>find</strong></h3><blockquote>
<p>返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p>
</blockquote>
<ul>
<li>语法: arr.find(callback(currentValue,index,arr),thisValue)<ul>
<li>currentValue:”必须,当前元素”</li>
<li>index:”可选,当前元素的索引值” </li>
<li>arr:”可选,当前元素所属的数组对象”</li>
<li>thisValue:”可选.传递给数组的值一般用’this’值,如果参数为空,undefined会传递给’this’值”</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//find</span></span><br><span class="line"><span class="keyword">var</span> users = [</span><br><span class="line">   &#123;<span class="attr">name</span>:<span class="string">'jiil'</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">name</span>:<span class="string">'alex'</span>&#125;,</span><br><span class="line">   &#123;<span class="attr">name</span>:<span class="string">'bill'</span>&#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> user;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;users.length;i++)&#123;</span><br><span class="line">   <span class="keyword">if</span>(users[i].name === <span class="string">'bill'</span>)&#123;</span><br><span class="line">      user = users[i];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line">user = users.find(<span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> user.name === <span class="string">'jiil'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br></pre></td></tr></table></figure>

<h3 id="every-一假即假-some-一真即真"><a href="#every-一假即假-some-一真即真" class="headerlink" title="every (一假即假)   ||  some(一真即真)"></a><strong>every (一假即假)</strong>   ||  <strong>some(一真即真)</strong></h3><blockquote>
<p>every:测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。 <br>some:测试数组中是不是有元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。</p>
</blockquote>
<p><strong>every : 注意：若收到一个空数组，此方法在一切情况下都会返回 true。</strong>  <br><strong>some : 注意：如果用一个空数组进行测试，在任何情况下它返回的都是false。</strong></p>
<ul>
<li><p>every语法:arr.every(callback(element,index,array),thisValue)</p>
<ul>
<li>element:”用于测试的当前值”</li>
<li>index:”可选,用于测试的当前值的索引”</li>
<li>array:”可选,调用 every 的当前数组”</li>
<li>thisValue:执行 callback 时使用的 this 值</li>
</ul>
</li>
<li><p>some语法:arr.some(callback(element,index,array),thisValue)</p>
<ul>
<li>element:”数组中正在处理的元素”</li>
<li>index:”可选,数组中正在处理的元素的索引值”</li>
<li>array:”可选,some()被调用的数组。”</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算对象数组中每个电脑的操作系统是否可用</span></span><br><span class="line"><span class="comment">// 大于16位操作系统表示可用,否则不可用  </span></span><br><span class="line"> <span class="keyword">var</span> computers = [</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">'apple'</span>,<span class="attr">rem</span>:<span class="string">'16'</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">'IBM'</span>,<span class="attr">rem</span>:<span class="string">'32'</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">'WIN'</span>,<span class="attr">rem</span>:<span class="string">'64'</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">name</span>:<span class="string">'Acer'</span>,<span class="attr">rem</span>:<span class="string">'128'</span>&#125;,</span><br><span class="line"> ];</span><br><span class="line"><span class="comment">//  es5</span></span><br><span class="line"><span class="comment">// var everyComputersCanRunProgram = true;</span></span><br><span class="line"><span class="comment">// var someComputersCanRunProgram = false;</span></span><br><span class="line"><span class="comment">// for(var i = 0;i &lt;= computers.length;i++)&#123;</span></span><br><span class="line"><span class="comment">//     var computers = computers[i];</span></span><br><span class="line"><span class="comment">//     if(computers.rem &lt; 16)&#123;</span></span><br><span class="line"><span class="comment">//         everyComputersCanRunProgram = false;</span></span><br><span class="line"><span class="comment">//     &#125;else&#123;</span></span><br><span class="line"><span class="comment">//         someComputersCanRunProgram = true;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(everyComputersCanRunProgram);</span></span><br><span class="line"><span class="comment">// console.log(someComputersCanRunProgram);</span></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">var</span> every = computers.every(<span class="function"><span class="keyword">function</span>(<span class="params">computer</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> computer.rem &gt; <span class="number">16</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`===<span class="subst">$&#123;every&#125;</span>===`</span>);</span><br><span class="line"><span class="keyword">var</span> some = computers.some(<span class="function"><span class="keyword">function</span>(<span class="params">computer</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> computer.rem &gt; <span class="number">16</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`===<span class="subst">$&#123;some&#125;</span>===`</span>);</span><br></pre></td></tr></table></figure>

<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><blockquote>
<p>接受一个函数作为参数，这个函数作为一个累加器，从左到右遍历整个类型数组，最后返回一个单一的值. </p>
</blockquote>
<ul>
<li>语法:array.reduce(callback(total, currentValue, currentIndex, arr), initialValue)<ul>
<li>total:必需。初始值, 或者计算结束后的返回值</li>
<li>currentValue:必需,当前元素</li>
<li>currentIndex:可选,当前元素的索引</li>
<li>arr:可选,当前元素所属的数组对象。</li>
<li>initialValue:可选,传递给函数的初始值</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算数组中所有值得总和</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    sum += numbers[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">var</span> sumval = numbers.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">sum,number</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum + number;</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(sumval);</span><br><span class="line"><span class="comment">// 将数组中对象的某一个属性抽离到另一个数组中</span></span><br><span class="line"><span class="keyword">var</span> color  = [</span><br><span class="line">    &#123;<span class="attr">color</span>:<span class="string">'red'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">color</span>:<span class="string">'green'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">color</span>:<span class="string">'black'</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> colorArr = color.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">newArr,colorArr</span>)</span>&#123;</span><br><span class="line">    newArr.push(colorArr.color);</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;,[]);</span><br><span class="line"><span class="built_in">console</span>.log(colorArr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断字符串中的括号是否对称</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">balancedParens</span>(<span class="params">string</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !string.split(<span class="string">""</span>).reduce(<span class="function"><span class="keyword">function</span>(<span class="params">previous,char</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(previous &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> previous;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(char == <span class="string">"("</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> ++previous;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(char == <span class="string">")"</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> --previous;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> previous;</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(balancedParens(<span class="string">"()()()()()(())"</span>));</span><br></pre></td></tr></table></figure>


<h2 id="ES6-语法"><a href="#ES6-语法" class="headerlink" title="ES6 语法"></a><strong>ES6 语法</strong></h2><h3 id="var-声明"><a href="#var-声明" class="headerlink" title="var 声明"></a>var 声明</h3><ul>
<li>var 声明的变量会挂载在window上,而let和const声明的变量不会</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a,<span class="built_in">window</span>.a);<span class="comment">// 100 100</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b,<span class="built_in">window</span>.b);<span class="comment">// 10 undefined</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c,<span class="built_in">window</span>.c);<span class="comment">// 1 undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>var 声明变量存在变量提升,let和const不存在变量提升</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// undefined ==&gt; a已声明但还没赋值,默认得到undefined值</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// 报错:b is not defined ==&gt; 找不到b这个变量</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//报错: c is not defined ==&gt; 找不到c这个变量</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="let-amp-const"><a href="#let-amp-const" class="headerlink" title="let &amp; const"></a>let &amp; const</h3><ul>
<li>let和const声明形成块作用域</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> c = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">// 报错 b is not defined ==&gt; 找不到b这个变量</span></span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">// 报错 c is not defined ==&gt; 找不到c这个变量</span></span><br></pre></td></tr></table></figure>

<ul>
<li>同一作用域下let和const不能声明同名变量,而var可以</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 100</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//报错:Identifier 'b' has already been declared ==&gt; 标识符b已被声明</span></span><br></pre></td></tr></table></figure>

<ul>
<li>暂存死区</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 在当前块作用域中存在a使用let/const声明的情况下,给a赋值10时,只会在当前作用域找变量a,</span></span><br><span class="line">    <span class="comment">// 而这时,还未到声明时候,所以error:a is not defined;</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="const-声明"><a href="#const-声明" class="headerlink" title="const 声明"></a>const 声明</h3><ul>
<li>一旦声明必须赋值,不能使用null占位</li>
<li>声明后不能再修改</li>
<li>如果声明的是复合类型数据,可以修改其属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">100</span>;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//Identifier 'a' has already been declared</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>:<span class="number">100</span>&#125;;</span><br><span class="line">obj.name = <span class="string">'apple'</span>;</span><br><span class="line">obj.a = <span class="number">10000</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);<span class="comment">// &#123;a:10000,name:'apple'&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>写法:<code>``</code></p>
<p>使用变量或函数:<code>${变量名/函数}</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"text1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// ES5</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> test = <span class="string">'&lt;h1&gt;Helo world&lt;/h1&gt;'</span>+<span class="string">'&lt;p&gt;ES6&lt;/p&gt;'</span>;<span class="comment">//换行需要加号拼接</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>).innerHTML = test;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// ES6</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">makeUppercase</span><span class="params">(word)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 将字母变成大写</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> word.toUpperCase();</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> name = <span class="string">'murlio'</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> test1 = <span class="string">`&lt;h1&gt;<span class="subst">$&#123;makeUppercase(<span class="string">'hello'</span>)&#125;</span> <span class="subst">$&#123;name&#125;</span>&lt;/h1&gt;&lt;p&gt;ES6&lt;/p&gt;`</span>;<span class="comment">//换行不需要加号拼接</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'text1'</span>).innerHTML = test1;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="箭头函数-箭头函数-javascript-MDN"><a href="#箭头函数-箭头函数-javascript-MDN" class="headerlink" title="箭头函数 (箭头函数 javascript MDN)"></a>箭头函数 (箭头函数 javascript MDN)</h3><ul>
<li>作用:<ul>
<li>缩减代码</li>
<li>改变this指向</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (参数1, 参数2, …, 参数N) =&gt; &#123; 函数声明 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于：(参数1, 参数2, …, 参数N) =&gt;&#123; return 表达式; &#125;</span></span><br><span class="line"><span class="comment">// (参数1, 参数2, …, 参数N) =&gt; 表达式（单一）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当只有一个参数时，圆括号是可选的：</span></span><br><span class="line"><span class="comment">// (单一参数) =&gt; &#123;函数声明&#125;</span></span><br><span class="line"><span class="comment">// 单一参数 =&gt; &#123;函数声明&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有参数的函数应该写成一对圆括号。</span></span><br><span class="line"><span class="comment">// () =&gt; &#123;函数声明&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多条语句需要花括号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//未使用箭头函数</span></span><br><span class="line">    <span class="keyword">const</span> double1 = <span class="function"><span class="keyword">function</span>(<span class="params">number</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 使用箭头函数</span></span><br><span class="line">    <span class="keyword">const</span> double2 = <span class="function">(<span class="params">number</span>) =&gt;</span> number * <span class="number">2</span>;</span><br><span class="line"><span class="comment">// map 一个数组,让数组中的值以double的形式展现</span></span><br><span class="line"><span class="keyword">const</span> number = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> newNumber = number.map(<span class="function"><span class="params">number</span> =&gt;</span> number * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newNumber);[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变this指向</span></span><br><span class="line"><span class="comment">//es 5</span></span><br><span class="line"><span class="comment">// const team = &#123;</span></span><br><span class="line"><span class="comment">//     members:&#123;"Henry","Elyse"&#125;,</span></span><br><span class="line"><span class="comment">//     teamName:'es6',</span></span><br><span class="line"><span class="comment">//     teamSummary:function()&#123;</span></span><br><span class="line"><span class="comment">//         return this.members.map(function(member)&#123;</span></span><br><span class="line"><span class="comment">//             // let self = this;</span></span><br><span class="line"><span class="comment">//             //this不知道该指向谁了</span></span><br><span class="line"><span class="comment">//             return `$&#123;member&#125;隶属于$&#123;this.teamName&#125;小组`;</span></span><br><span class="line"><span class="comment">//         &#125;.bind(this));</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> team = &#123;</span><br><span class="line">    members:&#123;<span class="string">"Henry"</span>,<span class="string">"Elyse"</span>&#125;,</span><br><span class="line">    teamName:<span class="string">'es6'</span>,</span><br><span class="line">    teamSummary:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.members.map(<span class="function">(<span class="params">member</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//this指向的就是team对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;member&#125;</span>隶属于<span class="subst">$&#123;<span class="keyword">this</span>.teamName&#125;</span>小组`</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(team.teamSummary());</span><br></pre></td></tr></table></figure>


<h3 id="增强对象字面量"><a href="#增强对象字面量" class="headerlink" title="增强对象字面量"></a>增强对象字面量</h3><p>缩减代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// new Object(); &#123;&#125;</span></span><br><span class="line"><span class="comment">// new Array(); []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 增强对象字面量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBookShop</span>(<span class="params">inventory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        inventory,</span><br><span class="line">        <span class="comment">// 不需要写成 inventoryValue:function()&#123;代码块&#125; 的形式</span></span><br><span class="line">        inventoryValue() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.inventory.reduce(<span class="function">(<span class="params">total, book</span>) =&gt;</span> total + book.price, <span class="number">0</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        priceForTitle(title) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.inventory.find(<span class="function"><span class="params">book</span>=&gt;</span>book.title === title).price;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> inventory = [&#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Vue'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Java'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'C++'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">30</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'C#'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">40</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'title'</span>: <span class="string">'Javascript'</span>,</span><br><span class="line">        <span class="string">'price'</span>: <span class="number">50</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> bookShop = createBookShop(inventory);</span><br><span class="line"><span class="built_in">console</span>.log(bookShop.inventoryValue());</span><br><span class="line"><span class="built_in">console</span>.log(bookShop.priceForTitle(<span class="string">'Java'</span>));</span><br></pre></td></tr></table></figure>

<h3 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h3><p>优化代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// function makeAjaxRequest(url,method)&#123;</span></span><br><span class="line"><span class="comment">//     if(!method)&#123;</span></span><br><span class="line"><span class="comment">//         method = "GET";</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     return method;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(makeAjaxRequest('www.baidu.com','POST'))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function makeAjaxRequest(url, method = "GET") &#123;</span></span><br><span class="line"><span class="comment">//     return method;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建用户,如果没有ID则随机生成一个ID</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">Math</span>.random() * <span class="number">100</span>).toFixed();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(new User(reandomId()));</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAdminUser</span>(<span class="params">user = new User(randomId(</span>))) </span>&#123;</span><br><span class="line">    user.admin = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(createAdminUser(user))</span><br></pre></td></tr></table></figure>

<h3 id="spread-operator-展开运算符"><a href="#spread-operator-展开运算符" class="headerlink" title="spread operator 展开运算符"></a>spread operator 展开运算符</h3><p>更快,更简便的操作数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNumbers</span>(<span class="params">...numbers</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> numbers.reduce(<span class="function">(<span class="params">sum,number</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sum + number;</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(addNumbers(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line"><span class="comment">// 等同于下</span></span><br><span class="line"><span class="comment">// function addNumbers(a,b,c,d)&#123;</span></span><br><span class="line"><span class="comment">//     const numbers = [a,b,c,d];</span></span><br><span class="line"><span class="comment">//     return numbers.reduce((sum,number)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//         return sum + number;</span></span><br><span class="line"><span class="comment">//     &#125;,0)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(addNumbers(1,2,3,4));</span></span><br><span class="line"><span class="comment">// 可以代替concat (concat javascript MDN)</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log([...arr1,...arr2])</span><br></pre></td></tr></table></figure>

<h3 id="解构-对象"><a href="#解构-对象" class="headerlink" title="解构(对象)"></a>解构(对象)</h3><ul>
<li>更快,更快捷</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Extension = &#123;</span><br><span class="line">    extension:<span class="string">"jpg"</span>,</span><br><span class="line">    name:<span class="string">'girl'</span>,</span><br><span class="line">    size:<span class="number">12020</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="comment">// function fileSammary(file)&#123;</span></span><br><span class="line"><span class="comment">//     return `$&#123;file.name&#125;.$&#123;file.extension&#125;的总大小是$&#123;file.size&#125;`;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(fileSammary(Extension));</span></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fileSammary</span>(<span class="params">&#123;name,extension,size&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span>.<span class="subst">$&#123;extension&#125;</span>的总大小是<span class="subst">$&#123;size&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fileSammary(Extension));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组解构</span></span><br><span class="line"><span class="keyword">var</span> Names = [<span class="string">"Henry"</span>,<span class="string">"Bucky"</span>,<span class="string">"Emily"</span>];</span><br><span class="line"><span class="keyword">const</span> [num0, num1, num2] = Names</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 解构对象数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> people = [</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'zhangsan'</span>,<span class="attr">age</span>:<span class="number">16</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'zhangsan1'</span>,<span class="attr">age</span>:<span class="number">17</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">'zhangsan2'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="comment">// var age = people[0].age</span></span><br><span class="line"><span class="comment">// console.log(age)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6 解构</span></span><br><span class="line"><span class="keyword">const</span> [&#123;age&#125;] = people</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用场景 将数组转换为对象</span></span><br><span class="line"><span class="keyword">const</span> points = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 期望数据格式</span></span><br><span class="line">[&#123;</span><br><span class="line">        x: <span class="number">1</span>,</span><br><span class="line">        y: <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        x: <span class="number">4</span>,</span><br><span class="line">        y: <span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        x: <span class="number">7</span>,</span><br><span class="line">        y: <span class="number">8</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// var newPoints = points.map(pair =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     // const x = pair[0];</span></span><br><span class="line"><span class="comment">//     // const y = pair[1];</span></span><br><span class="line"><span class="comment">//     const [x,y] = pair;</span></span><br><span class="line"><span class="comment">//     return &#123;x,y&#125;;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">//优化</span></span><br><span class="line"><span class="keyword">var</span> newPoints = points.map(<span class="function">(<span class="params">[x,y]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// const x = pair[0];</span></span><br><span class="line">    <span class="comment">// const y = pair[1];</span></span><br><span class="line">    <span class="comment">// const [x,y] = pair;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;x,y&#125;;</span><br><span class="line">&#125;); </span><br><span class="line"><span class="built_in">console</span>.log(newPoints);</span><br></pre></td></tr></table></figure>

<h2 id="新方法"><a href="#新方法" class="headerlink" title="新方法"></a>新方法</h2><h3 id="面向对象-class"><a href="#面向对象-class" class="headerlink" title="面向对象(class)"></a>面向对象(class)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 面向对象,万物皆可为对象</span></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="comment">// function Car(options)&#123;</span></span><br><span class="line"><span class="comment">//     this.title = options.title;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// Car.prototype.drive = function()&#123;</span></span><br><span class="line"><span class="comment">//     return "Vroom"</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// const car = new Car(&#123;title:'BMW'&#125;);</span></span><br><span class="line"><span class="comment">// console.log(car.title);</span></span><br><span class="line"><span class="comment">// console.log(car.drive());</span></span><br><span class="line"><span class="comment">// // es5 继承</span></span><br><span class="line"><span class="comment">// function Toyota(options)&#123;</span></span><br><span class="line"><span class="comment">//     Car.call(this,options);</span></span><br><span class="line"><span class="comment">//     this.color = options.color;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// Toyota.prototype = Object.create(Car.prototype);</span></span><br><span class="line"><span class="comment">// Toyota.prototype.constructor = Toyota;</span></span><br><span class="line"><span class="comment">// const toyota = new Toyota(&#123;color:'red',title:'Focus'&#125;);</span></span><br><span class="line"><span class="comment">// console.log(toyota);</span></span><br><span class="line"><span class="comment">// console.log(toyota.drive())</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = options.title;</span><br><span class="line">    &#125;</span><br><span class="line">    drive()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"vroom"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// var car = new Car(&#123;title:'BWM'&#125;);</span></span><br><span class="line"><span class="comment">// console.log(car);</span></span><br><span class="line"><span class="comment">// console.log(car.drive());</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toyota</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> (options)&#123;</span><br><span class="line">        <span class="keyword">super</span>(options);</span><br><span class="line">        <span class="keyword">this</span>.color = options.color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> toyota = <span class="keyword">new</span> Toyota(&#123;<span class="attr">color</span>:<span class="string">'red'</span>,<span class="attr">title</span>:<span class="string">'focus'</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(toyota);</span><br><span class="line"><span class="built_in">console</span>.log(toyota.drive());</span><br></pre></td></tr></table></figure>


<h3 id="generator-生成器-斐波那契数列"><a href="#generator-生成器-斐波那契数列" class="headerlink" title="generator 生成器 (斐波那契数列)"></a>generator 生成器 (斐波那契数列)</h3><ul>
<li>generator生成器,可以返回多次函数.</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// generator生成器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// function* number()&#123;</span></span><br><span class="line"><span class="comment">//     yield;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// const gen = number();</span></span><br><span class="line"><span class="comment">// console.log(gen.next());</span></span><br><span class="line"><span class="comment">// console.log(gen.next());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 斐波那契数列</span></span><br><span class="line"><span class="comment">// function fib(max)&#123;</span></span><br><span class="line"><span class="comment">//     var a = 0,b = 1,arr = [0,1];</span></span><br><span class="line"><span class="comment">//     while(arr.length &lt; max)&#123;</span></span><br><span class="line"><span class="comment">//         [a,b] = [b,a+b];</span></span><br><span class="line"><span class="comment">//         arr.push(b);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     return arr;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// console.log(fib(5))</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fib</span>(<span class="params">max</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span>,b = <span class="number">1</span>,n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &lt; max)&#123;</span><br><span class="line">        <span class="keyword">yield</span> a;</span><br><span class="line">        [a,b] = [b,a+b];</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f = fib(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// console.log(f.next());</span></span><br><span class="line"><span class="comment">// console.log(f.next());</span></span><br><span class="line"><span class="comment">// console.log(f.next());</span></span><br><span class="line"><span class="comment">// console.log(f.next());</span></span><br><span class="line"><span class="comment">// console.log(f.next());</span></span><br><span class="line"><span class="comment">// console.log(f.next());</span></span><br><span class="line"><span class="comment">// console.log(f.next());</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">of</span> fib(<span class="number">10</span>))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 迭代器还原生成器结构</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nameIterator</span>(<span class="params">names</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> nextIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextIndex &lt; names.length ? &#123;<span class="attr">value</span>:names[nextIndex++],<span class="attr">done</span>:<span class="literal">false</span>&#125; :&#123;<span class="attr">value</span>:<span class="string">'undefined'</span>,<span class="attr">done</span>:<span class="literal">true</span>&#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> nameArray = [<span class="string">'henry'</span>,<span class="string">'bucky'</span>,<span class="string">'emily'</span>];</span><br><span class="line"><span class="keyword">const</span> names = nameIterator(nameArray);</span><br><span class="line"><span class="comment">// console.log(names.next());</span></span><br><span class="line"><span class="comment">// console.log(names.next());</span></span><br><span class="line"><span class="comment">// console.log(names.next());</span></span><br><span class="line"><span class="comment">// console.log(names.next());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// id自增(es6 生成器)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">createIds</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">yield</span> index++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> gen = createIds();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(gen.next().value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="新的数据结构-map"><a href="#新的数据结构-map" class="headerlink" title="新的数据结构 map"></a>新的数据结构 map</h3><blockquote>
<p>键值对:与对象不同的是键和值可以是任何类型</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="comment">// 设置key键</span></span><br><span class="line"><span class="keyword">const</span> key1 = <span class="string">"some string"</span>,</span><br><span class="line">key2 = &#123;&#125;,</span><br><span class="line">key3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">// 为key设置value值</span></span><br><span class="line">map1.set(key1,<span class="string">'Vlaue of key1'</span>);</span><br><span class="line">map1.set(key2,<span class="string">'Vlaue of key2'</span>);</span><br><span class="line">map1.set(key3,<span class="string">'Vlaue of key3'</span>);</span><br><span class="line"><span class="comment">// 根据key获取对应的value值</span></span><br><span class="line"><span class="built_in">console</span>.log(map1.get(key1));</span><br><span class="line"><span class="built_in">console</span>.log(map1.get(key2));</span><br><span class="line"><span class="built_in">console</span>.log(map1.get(key3));</span><br><span class="line"><span class="comment">// 获取对应的value数量</span></span><br><span class="line"><span class="built_in">console</span>.log(map1.size)</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of map1 数组中的 key and value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key,value] <span class="keyword">of</span> map1)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// only key</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">of</span> map1.keys())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// only value</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> map1.values())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// forEach 遍历 map1</span></span><br><span class="line">map1.forEach(<span class="function">(<span class="params">key,value</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 将map1转换为正常的数组</span></span><br><span class="line"><span class="keyword">const</span> keyValueArray = <span class="built_in">Array</span>.from(map1);</span><br><span class="line"><span class="built_in">console</span>.log(keyValueArray);</span><br><span class="line"><span class="comment">// 将map1中的key转换为数组</span></span><br><span class="line"><span class="keyword">const</span> keyArray = <span class="built_in">Array</span>.from(map1.keys());</span><br><span class="line"><span class="built_in">console</span>.log(keyArray);</span><br><span class="line"><span class="comment">// 将map1中的value转换为数组</span></span><br><span class="line"><span class="keyword">const</span> valueArray = <span class="built_in">Array</span>.from(map1.values());</span><br><span class="line"><span class="built_in">console</span>.log(valueArray);</span><br></pre></td></tr></table></figure>

<h3 id="新的数据结构-set"><a href="#新的数据结构-set" class="headerlink" title="新的数据结构 set"></a>新的数据结构 set</h3><p>集合:可以存储任何数据类型,并且是唯一的(不重复的值)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set1 = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="comment">// 往set1添加数据</span></span><br><span class="line">set1.add(<span class="number">100</span>);</span><br><span class="line">set1.add(<span class="string">"a string"</span>);</span><br><span class="line">set1.add(&#123;</span><br><span class="line">    name: <span class="string">"murlio"</span></span><br><span class="line">&#125;)</span><br><span class="line">set1.add(<span class="literal">true</span>)</span><br><span class="line"><span class="built_in">console</span>.log(set1);</span><br><span class="line"><span class="keyword">const</span> set2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>,<span class="literal">true</span>,<span class="string">'string'</span>]);</span><br><span class="line"><span class="comment">// console.log(set2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算set1中的数据个数</span></span><br><span class="line"><span class="comment">// console.log(set1.size);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查set中是否有对应的值</span></span><br><span class="line"><span class="comment">// console.log(set1.has(100));</span></span><br><span class="line"><span class="comment">// console.log(set1.has(50+50));</span></span><br><span class="line"><span class="comment">// console.log(set1.has(&#123;name:"murlio"&#125;)); //匹配的是地址</span></span><br><span class="line"><span class="comment">// console.log(&#123;name:"hean"&#125; === &#123;name: "hean"&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除set中的内容</span></span><br><span class="line">set1.delete(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// console.log(set1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of 遍历set</span></span><br><span class="line"><span class="comment">// for (var item of set1)&#123;</span></span><br><span class="line"><span class="comment">//     console.log(item);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach 遍历</span></span><br><span class="line"><span class="comment">// set1.forEach((value)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     console.log(value);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将set转换为数组</span></span><br><span class="line"><span class="keyword">const</span> setArr = <span class="built_in">Array</span>.from(set1);</span><br><span class="line"><span class="built_in">console</span>.log(setArr);</span><br></pre></td></tr></table></figure>
<h2 id="数据请求-异步"><a href="#数据请求-异步" class="headerlink" title="数据请求(异步)"></a>数据请求(异步)</h2><h3 id="Promise-三种状态"><a href="#Promise-三种状态" class="headerlink" title="Promise (三种状态)"></a>Promise (三种状态)</h3><ul>
<li>构造函数 : Promise </li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Promise的三种状态</span></span><br><span class="line">           |--&gt;unresolved : 等待任务完成</span><br><span class="line">           |</span><br><span class="line">promise --&gt;|--&gt;resolved : 任务完成并且没有任何问题</span><br><span class="line">           |</span><br><span class="line">           |--&gt;rejected : 任务完成,但是出现问题</span><br><span class="line"></span><br><span class="line">          |--&gt;正常--&gt;状态:resolved--&gt;回调callback:then</span><br><span class="line">promise--&gt;|</span><br><span class="line">          |--&gt;出问题--&gt;状态:rejected--&gt;回调callback:<span class="keyword">catch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var promise = new Promise();</span></span><br><span class="line"><span class="comment">// console.log(promise);//error</span></span><br><span class="line"><span class="comment">// var promise = new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     setTimeout(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">//         resolve();</span></span><br><span class="line"><span class="comment">//     &#125;,3000)</span></span><br><span class="line"><span class="comment">//     // resolve();</span></span><br><span class="line"><span class="comment">//     // reject();</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// console.log(promise);</span></span><br><span class="line"><span class="comment">// promise</span></span><br><span class="line"><span class="comment">//     .then(()=&gt;console.log("成功,没有任何问题!"))</span></span><br><span class="line"><span class="comment">//     .then(()=&gt;console.log("可以无限调用then方法"))</span></span><br><span class="line"><span class="comment">//     .catch(()=&gt;console.log("uh oh,出现了重大问题!!"));</span></span><br><span class="line"><span class="comment">// new http:fetch</span></span><br><span class="line"><span class="comment">// 一个基于promise的请求方法,更简单,更便捷</span></span><br><span class="line"><span class="comment">// http://jsonplaceholder.typicode.com/posts</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">"http://jsonplaceholder.typicode.com/posts"</span>;</span><br><span class="line"><span class="comment">// console.log(fetch(url));</span></span><br><span class="line"><span class="comment">// fetch(url).then((data)=&gt;console.log(data))</span></span><br><span class="line">fetch(url).then(<span class="function"><span class="params">response</span>=&gt;</span>response.json())</span><br><span class="line">.then(<span class="function">(<span class="params">data</span>)=&gt;</span><span class="built_in">console</span>.log(data))</span><br><span class="line">.catch(<span class="function"><span class="params">err</span>=&gt;</span><span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure>


]]></content>
  </entry>
</search>
